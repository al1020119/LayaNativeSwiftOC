var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var jmt;
(function (jmt) {
    var loading;
    (function (loading) {
        var Image = Laya.Image;
        var Box = Laya.Box;
        var Sprite = Laya.Sprite;
        var Text = Laya.Text;
        var Animation = Laya.Animation;
        var Loading = /** @class */ (function (_super) {
            __extends(Loading, _super);
            function Loading(view, type, width, height) {
                if (type === void 0) { type = 0; }
                var _this = _super.call(this) || this;
                view.addChild(_this);
                if (width) {
                    _this.width = width;
                }
                else {
                    _this.width = 100;
                }
                if (height) {
                    _this.height = height;
                }
                else {
                    _this.height = 100;
                }
                if (type == 1) {
                    _this.iconImg = new Image(jmt.Skin.ICON_LOADING_FISH);
                }
                else {
                    _this.iconImg = new Image(jmt.Skin.ICON_LOADING_NORMAL);
                }
                _this.addChild(_this.iconImg);
                _this.iconImg.width = _this.width;
                _this.iconImg.height = _this.height;
                _this.iconImg.pivot(_this.iconImg.width / 2, _this.iconImg.height / 2);
                _this.iconImg.centerX = 0;
                _this.iconImg.centerY = 0;
                _this.turnRound();
                return _this;
            }
            Loading.prototype.turnRound = function () {
                this.iconImg.rotation = 0;
                Laya.Tween.to(this.iconImg, { rotation: 360 }, 1500, null, Handler.create(this, this.turnRound));
            };
            return Loading;
        }(Box));
        loading.Loading = Loading;
        var PopupLoading = /** @class */ (function (_super) {
            __extends(PopupLoading, _super);
            function PopupLoading(text, width, height) {
                var _this = _super.call(this) || this;
                if (width) {
                    _this.width = width;
                }
                else {
                    _this.width = 300;
                }
                if (height) {
                    _this.height = height;
                }
                else {
                    _this.height = 300;
                }
                // this.mainbox = new Laya.Box();
                _this.bgSprite = new Laya.Sprite();
                _this.addChild(_this.bgSprite);
                var radius = 5;
                //自定义路径
                var path = [
                    ["moveTo", radius, 0],
                    ["arcTo", _this.width, 0, _this.width, radius, radius],
                    ["arcTo", _this.width, _this.height, _this.width - radius, _this.height, radius],
                    ["arcTo", 0, _this.height, 0, _this.height - radius, radius],
                    ["arcTo", 0, 0, radius, 0, radius],
                ];
                //绘制圆角矩形
                _this.bgSprite.graphics.drawPath(0, 0, path, { fillStyle: "#000000" });
                _this.bgSprite.alpha = 0.7;
                _this.loadBox = new jmt.loading.Loading(_this);
                _this.addChild(_this.loadBox);
                _this.loadBox.centerX = 0;
                // this.loadBox.centerY=0;
                _this.loadBox.top = 50;
                if (text) {
                    _this.loadText = new Laya.Text();
                    _this.addChild(_this.loadText);
                    _this.loadText.y = _this.loadBox.height + _this.loadBox.top + 50;
                    _this.loadText.width = _this.width;
                    _this.loadText.align = 'center';
                    _this.loadText.color = '#ffffff';
                    _this.loadText.fontSize = 30;
                    _this.loadText.text = text;
                }
                else {
                    _this.loadBox.centerY = 0;
                }
                return _this;
            }
            PopupLoading.prototype.setText = function (text) {
                this.loadText.text = text;
            };
            return PopupLoading;
        }(Dialog));
        loading.PopupLoading = PopupLoading;
        var IconLoading = /** @class */ (function (_super) {
            __extends(IconLoading, _super);
            function IconLoading(view) {
                var _this = _super.call(this) || this;
                _this.isload = false;
                view.addChild(_this);
                _this.iconBox = new Animation();
                _this.iconBox.loadAtlas("res/atlas/loading.atlas", Laya.Handler.create(_this, _this.onLoaded));
                return _this;
            }
            IconLoading.prototype.onLoaded = function () {
                //添加到舞台
                this.addChild(this.iconBox);
                this.iconBox.size(300, 300);
                //播放动画
                // this.iconBox.play();
                // var f = this.iconBox.frames[20];
                // console.log(f);
                this.isload = true;
            };
            IconLoading.prototype.goto = function (index) {
                // this.iconBox.play(index)
                // var f = this.iconBox.frames;
                if (this.isload) {
                    // console.log(index);
                    this.iconBox.gotoAndStop(index);
                }
            };
            return IconLoading;
        }(Box));
        loading.IconLoading = IconLoading;
        var WaveLoading = /** @class */ (function (_super) {
            __extends(WaveLoading, _super);
            function WaveLoading(view, width, height) {
                var _this = _super.call(this) || this;
                _this.waveHeight = 0;
                _this.waveWidth = 200;
                _this.width = 200;
                _this.waveSpeed = 3000;
                _this.waveSpeed2 = 2000;
                _this.progress = 0;
                if (width) {
                    _this.width = width;
                }
                if (height) {
                    _this.height = height;
                }
                view.addChild(_this);
                _this.mainBox = new Box();
                _this.addChild(_this.mainBox);
                _this.mainBox.left = 0;
                _this.mainBox.right = 0;
                _this.mainBox.top = 0;
                _this.mainBox.bottom = 0;
                return _this;
            }
            WaveLoading.prototype.init = function (progress, showText, waveSkin, maskSkin, coverSkin, bgSkin) {
                if (progress) {
                    this.progress = progress;
                }
                if (showText) {
                    this.showText = showText;
                }
                if (waveSkin) {
                    this.waveSkin = waveSkin;
                }
                if (maskSkin) {
                    this.maskSkin = maskSkin;
                }
                if (coverSkin) {
                    this.coverSkin = coverSkin;
                }
                if (bgSkin) {
                    this.bgSkin = bgSkin;
                }
                if (this.bgSkin) {
                    this.waveBg = new Sprite();
                    var bgRes = Laya.loader.getRes(this.bgSkin);
                    var bgheight = bgRes.height * (this.width / bgRes.width);
                    this.waveBg.graphics.drawTexture(bgRes, 0, 0, this.width, bgheight);
                    this.mainBox.addChild(this.waveBg);
                }
                this.waveSp = new Sprite();
                this.waveSpap = new Sprite();
                this.waveSp.graphics.drawTexture(Laya.loader.getRes(this.waveSkin), 0, 0);
                this.waveSpap.graphics.drawTexture(Laya.loader.getRes(this.waveSkin), -50, 0, null, null, null, 0.5);
                this.mainBox.addChild(this.waveSp);
                this.mainBox.addChild(this.waveSpap);
                if (this.coverSkin) {
                    this.waveCover = new Sprite();
                    var coverRes = Laya.loader.getRes(this.coverSkin);
                    var coverheight = coverRes.height * (this.width / coverRes.width);
                    coverheight = Math.floor(coverheight);
                    if (!this.height) {
                        this.height = coverheight;
                    }
                    this.waveCover.graphics.drawTexture(coverRes, 0, 0, this.width, coverheight);
                    this.mainBox.addChild(this.waveCover);
                }
                if (this.maskSkin) {
                    this.waveMask = new Sprite();
                    var maskRes = Laya.loader.getRes(this.maskSkin);
                    var maskheight = maskRes.height * (this.width / maskRes.width);
                    maskheight = Math.floor(maskheight);
                    if (!this.height || maskheight > this.height) {
                        this.height = maskheight;
                    }
                    this.waveMask.graphics.drawTexture(maskRes, 0, 0, this.width, maskheight);
                    this.mainBox.mask = this.waveMask;
                }
                this.waveSp.y = this.height;
                this.waveSpap.y = this.height;
                this.progerssText = new Text();
                this.progerssText.width = this.width;
                // var text=Math.floor(this.progress*100)+'%';
                if (!this.showText) {
                    this.showText = Math.floor(this.progress * 100) + '%';
                }
                // this.progerssText.graphics.fillText(text,this.width/2,this.height/2,'30px Arial','#ffffff','center');
                this.progerssText.text = this.showText;
                this.progerssText.pivotY = this.progerssText.height / 2;
                // this.progerssText.x = this.width/2;
                this.progerssText.y = this.height / 2;
                this.progerssText.align = 'center';
                this.progerssText.fontSize = 28;
                this.progerssText.color = '#ffffff';
                // this.progerssText.bgColor='#ff0000';
                this.addChild(this.progerssText);
                var waveHeight = this.height - (this.height * this.progress);
                waveHeight = Math.floor(waveHeight) - 10;
                // if (waveHeight>(this.height-15)) {
                //     // waveHeight=this.height-15;//至少显示一点点
                // }
                Laya.Tween.to(this.waveSp, { y: waveHeight }, 3000, null, null, null, null, true);
                Laya.Tween.to(this.waveSpap, { y: waveHeight }, 3000, null, null, null, null, true);
                Laya.Tween.to(this.waveSp, { x: -(this.waveWidth) }, 3000, null, Handler.create(this, this.moveComplete), null, null, true);
                Laya.Tween.to(this.waveSpap, { x: -(this.waveWidth + 50) }, 2000, null, Handler.create(this, this.moveCompleteAp), null, null, true);
            };
            WaveLoading.prototype.moveComplete = function () {
                this.waveSp.x = 0;
                Laya.Tween.to(this.waveSp, { x: -(this.waveWidth) }, 3000, null, Handler.create(this, this.moveComplete), null, null, true);
            };
            WaveLoading.prototype.moveCompleteAp = function () {
                this.waveSpap.x = -50;
                Laya.Tween.to(this.waveSpap, { x: -(this.waveWidth + 50) }, 2000, null, Handler.create(this, this.moveCompleteAp), null, null, true);
            };
            WaveLoading.prototype.destroy = function (destroyChild) {
                if (destroyChild === void 0) { destroyChild = true; }
                Laya.Tween.clearAll(this);
                _super.prototype.destroy.call(this, true);
            };
            WaveLoading.prototype.drawWave = function () {
                // Laya.stage.addChild(this);
                var oW = 200;
                var oH = 200;
                // 线宽
                var lineWidth = 2;
                // 大半径
                var r = (oW / 2);
                var cR = r - 10 * lineWidth;
                //var ctx.beginPath();
                //ctx.lineWidth = lineWidth;
                // 水波动画初始参数
                var axisLength = 2 * r - 16 * lineWidth; // Sin 图形长度
                var unit = axisLength / 9; // 波浪宽
                var range = .4; // 浪幅
                var nowrange = range;
                var xoffset = 8 * lineWidth; // x 轴偏移量
                var data = ~~(60) / 100; // 数据量
                var sp = 0; // 周期偏移量
                var nowdata = 0;
                var waveupsp = 0.006; // 水波上涨速度
                if (data >= 0.85) {
                    if (nowrange > range / 4) {
                        var t = range * 0.01;
                        nowrange -= t;
                    }
                }
                else if (data <= 0.1) {
                    if (nowrange < range * 1.5) {
                        var t = range * 0.01;
                        nowrange += t;
                    }
                }
                else {
                    if (nowrange <= range) {
                        var t = range * 0.01;
                        nowrange += t;
                    }
                    if (nowrange >= range) {
                        var t = range * 0.01;
                        nowrange -= t;
                    }
                }
                if ((data - nowdata) > 0) {
                    nowdata += waveupsp;
                }
                if ((data - nowdata) < 0) {
                    nowdata -= waveupsp;
                }
                sp += 0.07;
                var paths = [];
                // console.log(nowdata);
                // console.log(xoffset);
                nowdata = 0.7;
                // paths.push(["moveTo",5,0]);
                // var Stack = []; // 记录起始点和终点坐标
                for (var i = xoffset; i <= xoffset + axisLength; i += 20 / axisLength) {
                    var x = sp + (xoffset + i) / unit;
                    var y = Math.sin(x) * nowrange;
                    var dx = i;
                    var dy = 2 * cR * (1 - nowdata) + (r - cR) - (unit * y);
                    //ctx.lineTo(dx, dy);
                    paths.push(["lineTo", dx, dy]);
                    // Stack.push([dx,dy])
                }
                // var startP = Stack[0]
                // var endP = Stack[Stack.length - 1]
                paths.push(["lineTo", xoffset + axisLength, oW]);
                paths.push(["lineTo", xoffset, oW]);
                // paths.push(["lineTo", startP[0], startP[1]]);
                paths.push(["closePath"]);
                // this.graphics.drawPath(0, 0, paths,
                // {
                //     fillStyle: "#00ffff"
                // });
            };
            return WaveLoading;
        }(Box));
        loading.WaveLoading = WaveLoading;
    })(loading = jmt.loading || (jmt.loading = {}));
})(jmt || (jmt = {}));
//# sourceMappingURL=Loading.js.map