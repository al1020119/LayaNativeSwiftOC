var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var jmt;
(function (jmt) {
    var common;
    (function (common) {
        var Image = Laya.Image;
        var Box = Laya.Box;
        var Sprite = Laya.Sprite;
        var Text = Laya.Text;
        // //定时清理图片缓存
        // export class ClearAllImg{
        //     private static totalView: any = {};
        //     private static viewName: any;
        //     static closeClear(imgArray: any[], downTime: number, viewName: string){
        //         ClearAllImg.totalView.viewName = viewName;
        //         var viewNameFn = viewName+ 'fn';
        //         ClearAllImg.totalView[viewNameFn] = ClearAllImg.clearAllImg;
        //         console.log(viewNameFn);
        //         // if(viewName == 'SkuView'){
        //         //     ClearAllImg.totalView[viewNameFn] = ClearAllImg.clearAllImg2;
        //         // }
        //         Laya.timer.once(downTime, ClearAllImg, ClearAllImg.totalView[viewNameFn], [imgArray]);
        //     }
        //     static clearAllImg(arg: any): void{
        //         console.log(111);
        //         for(let i = 0; i < arg.length; i++){
        //             Laya.loader.clearRes(arg[i]);
        //         }
        //         delete ClearAllImg.totalView.viewName;
        //         // delete ClearAllImg.totalView.viewNameFn;
        //     }
        //     static clearAllImg2(arg: any): void{
        //         console.log(222);
        //         for(let i = 0; i < arg.length; i++){
        //             Laya.loader.clearRes(arg[i]);
        //         }
        //         delete ClearAllImg.totalView.viewName;
        //         // delete ClearAllImg.totalView.viewNameFn;
        //     }
        //     static openClear(viewName: string): void{
        //         if(ClearAllImg.totalView.viewName){
        //             ClearAllImg.totalView.viewName = viewName;
        //             var viewNameFn = viewName+ 'fn';
        //             ClearAllImg.totalView[viewNameFn] = ClearAllImg.clearAllImg;
        //         //     if(viewName == 'SkuView'){
        //         //     ClearAllImg.totalView[viewNameFn] = ClearAllImg.clearAllImg2;
        //         // }
        //         }
        //         console.log(viewNameFn);
        //         console.log(ClearAllImg.totalView.viewName);
        //         if(ClearAllImg.totalView.viewName){
        //             console.log(ClearAllImg, ClearAllImg.totalView[viewNameFn]);
        //             Laya.timer.clear(ClearAllImg, ClearAllImg.totalView[viewNameFn]);
        //             delete ClearAllImg.totalView.viewName;
        //             // delete ClearAllImg.totalView[viewNameFn];
        //         }
        //     }
        // }
        //图片管理器
        var ImgManager = /** @class */ (function () {
            function ImgManager() {
            }
            ImgManager.openClear = function (imgArray) {
                for (var j = 0; j < imgArray.length; j++) {
                    if (ImgManager.clearImglist[imgArray[j]]) {
                        delete ImgManager.clearImglist[imgArray[j]];
                    }
                }
            };
            ImgManager.closeClear = function (imgArray) {
                for (var i = 0; i < imgArray.length; i++) {
                    ImgManager.clearImglist[imgArray[i]] = 1;
                }
            };
            ImgManager.clearImg = function () {
                for (var key in ImgManager.clearImglist) {
                    if (ImgManager.clearImglist.hasOwnProperty(key)) {
                        jmt.Resource.clearTextureRes(key);
                        // console.log(key);
                        delete ImgManager.clearImglist[key];
                    }
                }
            };
            ImgManager.clearImglist = {};
            return ImgManager;
        }());
        common.ImgManager = ImgManager;
        var ErrorBox = /** @class */ (function (_super) {
            __extends(ErrorBox, _super);
            function ErrorBox(view, tips, type, clickHandler) {
                if (type === void 0) { type = 0; }
                var _this = _super.call(this) || this;
                _this.type = 0;
                view.addChild(_this);
                _this.width = 400;
                _this.space = 30;
                _this.centerX = 0;
                _this.centerY = 0;
                _this.type = type;
                if (_this.type == ErrorBox.TYPE_BLANK) {
                    _this.iconImg = new Image(jmt.Skin.BLANK_ICON);
                }
                else {
                    _this.iconImg = new Image(jmt.Skin.ERROR_NET_ICON);
                }
                _this.addChild(_this.iconImg);
                _this.iconImg.centerX = 0;
                _this.tipsTxt = new Label();
                _this.addChild(_this.tipsTxt);
                _this.tipsTxt.width = _this.width;
                _this.tipsTxt.wordWrap = true;
                _this.tipsTxt.leading = 20;
                _this.tipsTxt.centerX = 0;
                _this.tipsTxt.text = tips;
                _this.tipsTxt.color = '#999999';
                _this.tipsTxt.font = jmt.Skin.FONT;
                _this.tipsTxt.fontSize = 26;
                if (clickHandler) {
                    _this.clickHandler = clickHandler;
                    _this.on(LayaEvent.CLICK, _this.clickHandler.caller, _this.clickHandler.method);
                }
                return _this;
            }
            ErrorBox.TYPE_NET_ERROR = 0;
            ErrorBox.TYPE_BLANK = 1;
            return ErrorBox;
        }(Laya.VBox));
        common.ErrorBox = ErrorBox;
        var Toast = /** @class */ (function () {
            function Toast() {
                //
            }
            Toast.error = function (text, timeout) {
                if (timeout === void 0) { timeout = 3000; }
                this.show(text, 0, timeout);
            };
            Toast.success = function (text, timeout, complete) {
                if (timeout === void 0) { timeout = 3000; }
                this.show(text, 1, timeout, complete);
            };
            Toast.show = function (text, type, timeout, complete) {
                // if (this.mainbox) {
                // return;//禁止同时弹出多个窗口
                // }
                if (type === void 0) { type = 1; }
                if (timeout === void 0) { timeout = 3000; }
                // 用于错误Toast提示不能重复弹窗
                if (type == 0) {
                    if (Toast.isErrorExist) {
                        return;
                    }
                }
                var mainbox = new LayaBox();
                var bgsprite = new Sprite();
                var iconImg;
                var titleText = new Label();
                if (type == 0) {
                    iconImg = new Image(jmt.Skin.ICON_ERROR);
                }
                else {
                    iconImg = new Image(jmt.Skin.ICON_SUCCESS);
                }
                titleText.text = text;
                titleText.color = '#eeeeee';
                titleText.font = jmt.Skin.FONT;
                titleText.fontSize = 26;
                titleText.centerX = 0;
                // titleText.leading = 20;
                // titleText.align='center';
                // titleText.valign='middle';
                // titleText.wordWrap = false;
                // titleText.y = 20;
                // titleText.bgColor='#ff0000';
                Laya.stage.addChild(mainbox);
                if (type == 0) {
                    Toast.isErrorExist = 1;
                }
                mainbox.width = titleText.width + 100;
                mainbox.height = 240;
                mainbox.centerX = 0;
                mainbox.centerY = 0;
                // this.mainbox.bottom = 300;
                mainbox.zOrder = 999999;
                mainbox.addChild(bgsprite);
                mainbox.addChild(iconImg);
                mainbox.addChild(titleText);
                iconImg.centerX = 0;
                iconImg.y = 50;
                titleText.y = iconImg.y + iconImg.height + 30;
                if (mainbox.width < 260) {
                    mainbox.width = 260;
                }
                // bgsprite.graphics.drawRect(0,0,mainbox.width,mainbox.height,'#990000');
                var radius = 5;
                //自定义路径
                var path = [
                    ["moveTo", radius, 0],
                    ["arcTo", mainbox.width, 0, mainbox.width, radius, radius],
                    ["arcTo", mainbox.width, mainbox.height, mainbox.width - radius, mainbox.height, radius],
                    ["arcTo", 0, mainbox.height, 0, mainbox.height - radius, radius],
                    ["arcTo", 0, 0, radius, 0, radius],
                ];
                //绘制圆角矩形
                bgsprite.graphics.drawPath(0, 0, path, { fillStyle: "#000000" });
                bgsprite.alpha = 0.7;
                Laya.timer.once(timeout, this, function () {
                    if (type == 0) {
                        Toast.isErrorExist = 0;
                    }
                    mainbox.removeSelf();
                    mainbox.destroy();
                    mainbox = null;
                    if (complete) {
                        complete.run();
                    }
                });
            };
            Toast.msg = function (text, view, complete) {
                // if (this.mainbox) {
                //     return;
                // }
                var mainbox = new LayaBox();
                var bgsprite = new Sprite();
                var titleText = new Text();
                titleText.text = text;
                titleText.color = '#eeeeee';
                titleText.font = jmt.Skin.FONT;
                titleText.fontSize = 26;
                titleText.leading = 20;
                titleText.align = 'center';
                titleText.valign = 'middle';
                titleText.wordWrap = true;
                titleText.y = 20;
                // titleText.bgColor='#ff0000';
                var width = Laya.stage.width - 200;
                titleText.width = width;
                var height = titleText.height;
                if (view) {
                    view.addChild(mainbox);
                }
                else {
                    Laya.stage.addChild(mainbox);
                }
                mainbox.width = width;
                // mainbox.height = height;
                mainbox.centerX = 0;
                mainbox.centerY = 0;
                // mainbox.bottom = 300;
                mainbox.zOrder = 999999;
                mainbox.addChild(bgsprite);
                mainbox.addChild(titleText);
                if (mainbox.height < 50) {
                    mainbox.height = 50;
                }
                // bgsprite.graphics.drawRect(0,0,mainbox.width,mainbox.height,'#990000');
                var radius = 10;
                //自定义路径
                var path = [
                    ["moveTo", radius, 0],
                    ["arcTo", mainbox.width, 0, mainbox.width, radius, radius],
                    ["arcTo", mainbox.width, mainbox.height, mainbox.width - radius, mainbox.height, radius],
                    ["arcTo", 0, mainbox.height, 0, mainbox.height - radius, radius],
                    ["arcTo", 0, 0, radius, 0, radius],
                ];
                //绘制圆角矩形
                bgsprite.graphics.drawPath(0, 0, path, { fillStyle: "#000000" }, { "strokeStyle": "#aaaaaa", "lineWidth": "1" });
                bgsprite.alpha = 0.7;
                // titleText.pivot(titleText.width/2,titleText.height/2);
                // titleText.x = mainbox.width/2;
                // titleText.y = mainbox.height/2;
                // titleText.centerY=0;
                // bgsprite.graphics.fillText(text,this.width/2,this.height/2,'30px Arial','#ffffff','center');
                // var titleLabel : Label = new Label(text);
                // Laya.stage.addChild(titleLabel);
                // titleLabel.centerX=0;
                // titleLabel.centerY=0;
                // titleLabel.zOrder=99999;
                // titleLabel.color='#ffffff';
                // titleLabel.bgColor='#ff0000aa';
                Laya.timer.once(3000, this, function () {
                    mainbox.removeSelf();
                    mainbox.destroy();
                    mainbox = null;
                    if (complete) {
                        complete.run();
                    }
                });
            };
            return Toast;
        }());
        common.Toast = Toast;
        var RollBall = /** @class */ (function (_super) {
            __extends(RollBall, _super);
            function RollBall(view) {
                var _this = _super.call(this) || this;
                view.addChild(_this);
                _this.size(383, 356);
                _this.img0 = new Image(jmt.Skin.NOTES_BALL_0);
                _this.img1 = new Image(jmt.Skin.NOTES_BALL_1);
                _this.img2 = new Image(jmt.Skin.NOTES_BALL_2);
                _this.addChild(_this.img0);
                _this.addChild(_this.img1);
                _this.addChild(_this.img2);
                _this.img0.pivot(_this.img0.width / 2, _this.img0.height / 2);
                _this.img0.centerX = 0;
                _this.img0.centerY = 0;
                _this.img1.pivot(_this.img1.width / 2, _this.img1.height / 2);
                _this.img1.centerX = 0;
                _this.img1.centerY = 0;
                _this.img2.pivot(_this.img2.width / 2, _this.img2.height / 2);
                _this.img2.centerX = 0;
                _this.img2.centerY = 0;
                _this.Rotate();
                return _this;
            }
            RollBall.prototype.Rotate = function () {
                Laya.Tween.to(this.img0, { rotation: 300 }, 15000, null);
                Laya.Tween.to(this.img1, { rotation: 300 }, 15000, null);
                Laya.Tween.to(this.img2, { rotation: -300 }, 15000, null, Handler.create(this, this.Rotate2));
            };
            RollBall.prototype.Rotate2 = function () {
                Laya.Tween.to(this.img0, { rotation: 0 }, 15000, null);
                Laya.Tween.to(this.img1, { rotation: 0 }, 15000, null);
                Laya.Tween.to(this.img2, { rotation: 0 }, 15000, null, Handler.create(this, this.Rotate));
            };
            return RollBall;
        }(Box));
        common.RollBall = RollBall;
        /**
         * 富文本类型(重写Text类的排版和渲染函数以实现自定义的富文本类型)
         */
        // export class SoulLabel extends Laya.Text
        // {
        //     constructor()
        //     {
        //         super();
        //     }
        //     private typeList = {};                  //取出文本里面的关键字
        //     private typeIndexList = null;             //关键字所在文本的位置
        //     private typeLines = null;                 //利用关键字重新划分文本
        //     private underLineWidth = 0;             //下划线长度
        //     private underColor = "";                //下划线颜色
        //     /**
        //      * 渲染文字
        //      * @param begin 
        //      * @param visibleLineCount 
        //      */
        //     renderText(begin, visibleLineCount)
        //     {
        //         var graphics = this.graphics;
        //         graphics.clear(true);
        //         var ctxFont = (this.italic ? "italic " : "") + (this.bold ? "bold " : "") + this.fontSize + "px " + (Browser.onIPhone ? (laya.display.Text._fontFamilyMap[this.font] || this.font) : this.font);
        //         Browser.context.font = ctxFont;
        //         var padding = this.padding;
        //         var startX = padding[3];
        //         var textAlgin = "left";
        //         var lineHeight = this.leading + this._charSize.height;
        //         var tCurrBitmapFont = this._currBitmapFont;
        //         if (tCurrBitmapFont)
        //         {
        //             lineHeight = this.leading + tCurrBitmapFont.getMaxHeight();
        //         };
        //         var startY = padding[0];
        //         if (this._height > 0)
        //         {
        //             var tempVAlign = (this._textHeight > this._height) ? "top" : this.valign;
        //             if (tempVAlign === "middle")
        //                 startY = (this._height - visibleLineCount * lineHeight) * 0.5 + padding[0] - padding[2];
        //             else if (tempVAlign === "bottom")
        //                 startY = this._height - visibleLineCount * lineHeight - padding[2];
        //         };
        //         var style = this._style;
        //         if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize)
        //         {
        //             var bitmapScale = tCurrBitmapFont.fontSize / this.fontSize;
        //         }
        //         if (this._clipPoint)
        //         {
        //             graphics.save();
        //             if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize)
        //             {
        //                 var tClipWidth = 0;
        //                 var tClipHeight = 0;
        //                 this._width ? tClipWidth = (this._width - padding[3] - padding[1]) : tClipWidth = this._textWidth;
        //                 this._height ? tClipHeight = (this._height - padding[0] - padding[2]) : tClipHeight = this._textHeight;
        //                 tClipWidth *= bitmapScale;
        //                 tClipHeight *= bitmapScale;
        //                 graphics.clipRect(padding[3], padding[0], tClipWidth, tClipHeight);
        //             } else
        //             {
        //                 graphics.clipRect(padding[3], padding[0], this._width ? (this._width - padding[3] - padding[1]) : this._textWidth, this._height ? (this._height - padding[0] - padding[2]) : this._textHeight);
        //             }
        //         };
        //         var password = style.password;
        //         if (("prompt" in this) && this['prompt'] == this._text)
        //             password = false;
        //         var x = 0, y = 0;
        //         var end = Math.min(this._lines.length, visibleLineCount + begin) || 1;
        //         let color = this.color;
        //         let underline = this.underline;
        //         let bold = this.bold;
        //         for (var i = begin; i < end; i++)
        //         {
        //             var lines = this.typeLines[i];
        //             var _word;
        //             if (this.align == "right")
        //             {
        //                 startX = this._width - padding[1] - this.getTextLinesWidth(lines);
        //             } else if (this.align == "center")
        //             {
        //                 startX = (this._width - this.getTextLinesWidth(lines)) * 0.5 + padding[3] - padding[1];
        //             }
        //             let nowX = startX - (this._clipPoint ? this._clipPoint.x : 0);
        //             for (var line of lines)
        //             {
        //                 var word = line['text'];
        //                 x = nowX;
        //                 y = startY + lineHeight * i - (this._clipPoint ? this._clipPoint.y : 0);
        //                 if (tCurrBitmapFont)
        //                 {
        //                     var tWidth = this.width;
        //                     if (tCurrBitmapFont.autoScaleSize)
        //                     {
        //                         tWidth = this.width * bitmapScale;
        //                     }
        //                     tCurrBitmapFont.drawText(word, this, x, y, this.align, tWidth);
        //                 } else
        //                 {
        //                     if (Laya.Render.isWebGL)
        //                     {
        //                         this._words || (this._words = );
        //                         _word = this._words.length > (i - begin) ? this._words[i - begin] : new Laya.WordText();
        //                         _word.setText(word);
        //                     } else
        //                     {
        //                         _word = word;
        //                     }
        //                     //设置颜色、粗体等等
        //                     if (line["type"])
        //                     {
        //                         //如果有关键字设置的类型，则使用关键字
        //                         if (line["type"]["bold"] != undefined)
        //                         {
        //                             if (bold != line["type"]["bold"])
        //                             {
        //                                 bold = line["type"]["bold"];
        //                                 ctxFont = (this.italic ? "italic " : "") + (bold ? "bold " : "") + this.fontSize + "px " + (Browser.onIPhone ? (laya.display.Text._fontFamilyMap[this.font] || this.font) : this.font);
        //                                 Browser.context.font = ctxFont;
        //                             }
        //                         }
        //                         if (line["type"]["underline"] != undefined)
        //                         {
        //                             if (underline != line["type"]["underline"])
        //                             {
        //                                 underline = line["type"]["underline"]
        //                             }
        //                         }
        //                         if (line["type"]["color"])
        //                         {
        //                             if (color != line["type"]["color"])
        //                             {
        //                                 color = line["type"]["color"]
        //                                 //this._getCSSStyle().color = color;
        //                             }
        //                         }
        //                     }
        //                     if (underline)
        //                     {
        //                         //绘制下划线
        //                         this.underColor = color;
        //                         this.underLineWidth = this.getTextWidth(line['text']);
        //                         this.drawUnderline(textAlgin, x, y, i);
        //                     }
        //                     if (style.stroke)
        //                         graphics.fillBorderText(_word, x, y, ctxFont, color, style.strokeColor, style.stroke, textAlgin);
        //                     else
        //                         graphics.fillText(_word, x, y, ctxFont, color, textAlgin);
        //                 }
        //                 //不再是每行绘制一次，而是每行根据关键字绘制多次
        //                 nowX += this.getTextWidth(line['text']);
        //             }
        //         }
        //         if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize)
        //         {
        //             var tScale = 1 / bitmapScale;
        //             this.scale(tScale, tScale);
        //         }
        //         if (this._clipPoint)
        //             graphics.restore();
        //         this._startX = startX;
        //         this._startY = startY;
        //     }
        //     parseLines(text)
        //     {
        //         var needWordWrapOrTruncate = this.wordWrap || this.overflow == Text.HIDDEN;
        //         if (needWordWrapOrTruncate)
        //         {
        //             var wordWrapWidth = this.getWordWrapWidth();
        //         }
        //         if (this._currBitmapFont)
        //         {
        //             this._charSize.width = this._currBitmapFont.getMaxWidth();
        //             this._charSize.height = this._currBitmapFont.getMaxHeight();
        //         } else
        //         {
        //             var measureResult = Browser.context.measureText(Text._testWord);
        //             this._charSize.width = measureResult.width;
        //             this._charSize.height = (measureResult.height || this.fontSize);
        //         };
        //         //TS的正则匹配需要加转义
        //         var lines = text.replace(/\\r\\n/g, "\n").split("\\n");
        //         for (var i = 0, n = lines.length; i < n; i++)
        //         {
        //             var line = lines[i];
        //             if (needWordWrapOrTruncate)
        //                 this.parseLine(line, wordWrapWidth);
        //             else
        //             {
        //                 this._lineWidths.push(this.getTextWidth(line));
        //                 this._lines.push(line);
        //             }
        //         }
        //     }
        //     typeset()
        //     {
        //         this._isChanged = false;
        //         if (!this._text)
        //         {
        //             this._clipPoint = null;
        //             this._textWidth = this._textHeight = 0;
        //             this.graphics.clear(true);
        //             return;
        //         }
        //         Browser.context.font = this._getCSSStyle().font;
        //         this._lines.length = 0;
        //         this._lineWidths.length = 0;
        //         this.typeLines.length = 0;
        //         this._text = this.parseType(this._text);
        //         if (this._isPassWordMode())
        //         {
        //             this.parseLines(this._getPassWordTxt(this._text));
        //         } else
        //             this.parseLines(this._text);
        //         this.evalTextSize();
        //         if (this.checkEnabledViewportOrNot())
        //             this._clipPoint || (this._clipPoint = new Point(0, 0));
        //         else
        //             this._clipPoint = null;
        //         var lineCount = this._lines.length;
        //         if (this.overflow != Text.VISIBLE)
        //         {
        //             var func = this.overflow == Text.HIDDEN ? Math.floor : Math.ceil;
        //             lineCount = Math.min(lineCount, func((this.height - this.padding[0] - this.padding[2]) / (this.leading + this._charSize.height)));
        //         };
        //         var startLine = this.scrollY / (this._charSize.height + this.leading) | 0;
        //         this.parseTypeLines();
        //         this.renderText(startLine, lineCount);
        //         this.repaint();
        //     }
        //     /**
        //      * 绘制下划线
        //      * @param align 
        //      * @param x 
        //      * @param y 
        //      * @param lineIndex 
        //      */
        //     drawUnderline(align, x, y, lineIndex)
        //     {
        //         var lineWidth = this.underLineWidth;
        //         switch (align)
        //         {
        //             case 'center':
        //                 x -= lineWidth / 2;
        //                 break;
        //             case 'right':
        //                 x -= lineWidth;
        //                 break;
        //             case 'left':
        //             default:
        //                 break;
        //         }
        //         y += this._charSize.height;
        //         this._graphics.drawLine(x, y, x + lineWidth, y, this.underColor || this.color, 1);
        //     }
        //     /**
        //      * 取出关键字即所在的索引
        //      * @param _text 
        //      */
        //     private parseType(_text: string)
        //     {
        //         let text = _text.replace(/(\\r\\n)|(\\n)/g, "")
        //         let typeKey = text.match(/{.+?}/);
        //         if (!typeKey)
        //             return _text;
        //         let ketStr = typeKey[0];
        //         while (ketStr)
        //         {
        //             let typeIndex = text.indexOf(ketStr)
        //             if (!this.typeList[typeIndex])
        //             {
        //                 this.typeIndexList.push(typeIndex);
        //                 this.typeList[typeIndex] = {}
        //             }
        //             switch (ketStr)
        //             {
        //                 case '{b}':
        //                     this.typeList[typeIndex]["bold"] = true;
        //                     break;
        //                 case '{/b}':
        //                     this.typeList[typeIndex]["bold"] = false;
        //                     break;
        //                 case '{u}':
        //                     this.typeList[typeIndex]["underline"] = true;
        //                     break;
        //                 case '{/u}':
        //                     this.typeList[typeIndex]["underline"] = false;
        //                     break;
        //                 default:
        //                     this.typeList[typeIndex]["color"] = ketStr.slice(1, -1);
        //                     break;
        //             }
        //             _text = _text.replace(ketStr, '');
        //             text = text.replace(ketStr, '');
        //             typeKey = text.match(/{.+?}/);
        //             if (!typeKey)
        //                 return _text;
        //             ketStr = typeKey[0];
        //         }
        //         return _text;
        //     }
        //     /**
        //      * 把按行划分的文本再依据关键字划分一次
        //      */
        //     private parseTypeLines()
        //     {
        //         let lines = this._lines;
        //         let index = 0;
        //         for (let oldLine of lines)
        //         {
        //             let newLines = null;
        //             let oldIndex = 0;
        //             while (oldLine.length > this.typeIndexList[0] - index)
        //             {
        //                 let newLine = {};
        //                 if (oldIndex < this.typeIndexList[0] - index)
        //                 {
        //                     newLine['text'] = oldLine.slice(oldIndex, this.typeIndexList[0] - index)
        //                     newLine['type'] = this.typeList[oldIndex + index];
        //                     newLines.push(newLine);
        //                 }
        //                 oldIndex = this.typeIndexList[0] - index;
        //                 this.typeIndexList.splice(0, 1);
        //             }
        //             let endLine = {};
        //             if (oldIndex < oldLine.length)
        //             {
        //                 endLine['text'] = oldLine.slice(oldIndex)
        //                 endLine['type'] = this.typeList[oldIndex + index];
        //                 newLines.push(endLine);
        //             }
        //             this.typeLines.push(newLines)
        //             index += oldLine.length;
        //         }
        //     }
        //     private getTextLinesWidth(lines)
        //     {
        //         let width = 0;
        //         for (let line of lines)
        //         {
        //             width += this.getTextWidth(line['text']);
        //         }
        //         return width;
        //     }
        // }
        var SoulTextBox = /** @class */ (function (_super) {
            __extends(SoulTextBox, _super);
            function SoulTextBox(view, width, height) {
                var _this = _super.call(this) || this;
                //private textBox : Box;
                // public maxWidth : number=Laya.stage.width;
                // public maxHeight : number=0;
                _this.lineHeight = 35;
                _this._fontSize = 26;
                _this.fontSmallSize = 26;
                _this.fontBigSize = 46;
                _this.font = 'SimHei';
                _this.printSpeed = 10;
                _this.showSpeed = 100;
                _this.contLen = 0;
                _this.isFinish = false;
                _this.letterColor = '#ffffff';
                _this.tweenList = [];
                _this.typeList = {}; //取出文本里面的关键字
                _this.typeIndexList = []; //关键字所在文本的位置
                _this.typeLines = []; //利用关键字重新划分文本
                //平台，为了兼容零下记忆
                if (jmt.Config.NOVELID != 10000) {
                    _this.lineHeight = 38;
                    _this._fontSize = 27;
                    _this.fontSmallSize = 27;
                    _this.fontBigSize = 46;
                    _this.printSpeed = 40;
                    _this.showSpeed = 100;
                    _this.letterColor = '#423200';
                }
                if (view) {
                    view.addChild(_this);
                }
                if (width) {
                    _this.width = width;
                }
                if (height) {
                    _this.height = height;
                }
                return _this;
            }
            Object.defineProperty(SoulTextBox.prototype, "fontSize", {
                get: function () {
                    return this._fontSize;
                },
                set: function (size) {
                    this._fontSize = size;
                },
                enumerable: true,
                configurable: true
            });
            SoulTextBox.prototype.play = function (text, complete, blackColor) {
                if (!text) {
                    text = '';
                }
                this.text = text;
                this.completeHandler = complete;
                this.isFinish = false;
                this.tweenList = [];
                this.typeIndexList = [];
                this.typeLines = [];
                this.typeList = {};
                this.fontSize = this.fontSmallSize;
                this.letterColor = this.letterColor;
                //平台，为了兼容零下记忆
                if (jmt.Config.NOVELID != 10000) {
                    this.letterColor = this.letterColor;
                }
                if (blackColor) {
                    this.letterColor = blackColor;
                }
                this.removeChildren();
                this.destroyChildren();
                this.createTween();
            };
            SoulTextBox.prototype.finish = function () {
                if (!this.isFinish) {
                    for (var index = 0; index < this.tweenList.length; index++) {
                        var tween = this.tweenList[index];
                        tween.complete();
                    }
                }
            };
            SoulTextBox.prototype.parseCont = function (text) {
                var RegExp = /{clue:(\d+)}(.*?){\/clue}/g;
                // var obj = text.match(RegExp); 
                // console.log(obj);
                var result;
                var conArr = [];
                var mi = 0;
                while ((result = RegExp.exec(text)) != null) {
                    conArr[mi] = {
                        clueid: result[1],
                        cont: result[2]
                    };
                    // console.log(conArr[mi]);
                    mi++;
                }
                var cont = text.replace(RegExp, "{clue}");
                var conArr2 = cont.split('{clue}');
                var conArr3 = [];
                for (var index = 0; index < conArr2.length; index++) {
                    var element = conArr2[index];
                    if (element != '') {
                        var eo = {
                            cont: element
                        };
                        conArr3.push(eo);
                    }
                    if (conArr[index]) {
                        conArr3.push(conArr[index]);
                    }
                }
                // console.log(conArr3);
                return conArr3;
            };
            /**
            * 取出关键字即所在的索引
            * @param _text
            */
            SoulTextBox.prototype.parseType = function (_text) {
                var text = _text.replace(/(\\r\\n)|(\\n)/g, "");
                var typeKey = text.match(/{.+?}/);
                if (!typeKey)
                    return _text;
                var ketStr = typeKey[0];
                while (ketStr) {
                    var typeIndex = text.indexOf(ketStr);
                    if (!this.typeList[typeIndex]) {
                        this.typeIndexList.push(typeIndex);
                        this.typeList[typeIndex] = {};
                    }
                    if (ketStr.match('clue')) {
                        //碎片标签
                        if (ketStr.match('/')) {
                            this.typeList[typeIndex]["clue"] = 0;
                        }
                        else {
                            this.typeList[typeIndex]["clue"] = 1;
                        }
                    }
                    else {
                        switch (ketStr) {
                            case '{b}':
                                this.typeList[typeIndex]["bold"] = 1;
                                break;
                            case '{/b}':
                                this.typeList[typeIndex]["bold"] = 0;
                                break;
                            case '{big}':
                                this.typeList[typeIndex]["big"] = 1;
                                break;
                            case '{/big}':
                                this.typeList[typeIndex]["big"] = 0;
                                break;
                            default:
                                this.typeList[typeIndex]["color"] = ketStr.slice(1, -1);
                                break;
                        }
                    }
                    _text = _text.replace(ketStr, ''); //去除标签
                    text = text.replace(ketStr, '');
                    typeKey = text.match(/{.+?}/);
                    if (!typeKey)
                        return _text;
                    ketStr = typeKey[0];
                }
                return _text; //返回去除标签后的文本
            };
            /**
             * 把按行划分的文本再依据关键字划分一次
             */
            // private parseTypeLines()
            // {
            //     let lines = this._lines;
            //     let index = 0;
            //     for (let oldLine of lines)
            //     {
            //         let newLines = null;
            //         let oldIndex = 0;
            //         while (oldLine.length > this.typeIndexList[0] - index)
            //         {
            //             let newLine = {};
            //             if (oldIndex < this.typeIndexList[0] - index)
            //             {
            //                 newLine['text'] = oldLine.slice(oldIndex, this.typeIndexList[0] - index)
            //                 newLine['type'] = this.typeList[oldIndex + index];
            //                 newLines.push(newLine);
            //             }
            //             oldIndex = this.typeIndexList[0] - index;
            //             this.typeIndexList.splice(0, 1);
            //         }
            //         let endLine = {};
            //         if (oldIndex < oldLine.length)
            //         {
            //             endLine['text'] = oldLine.slice(oldIndex)
            //             endLine['type'] = this.typeList[oldIndex + index];
            //             newLines.push(endLine);
            //         }
            //         this.typeLines.push(newLines)
            //         index += oldLine.length;
            //     }
            // }
            SoulTextBox.prototype.createTween = function () {
                //"LayaBox字符串总宽度"
                // var maxwidth:number = Laya.stage.width-100;
                //文本创建的起始位置(>>在此使用右移运算符，相当于/2 用>>效率更高)
                // var offsetX:number = Laya.stage.width - w >> 1;
                // this.contLen = this.text.length;
                // this.text='测试文本，{big}放大关键字{/big}，{clue:5}这是一个记忆碎片哦！{/clue}无法对拉动可拉到了的离开了凯迪拉克，便利店拉丝款进口量萨克斯磷酸肌酸将快速离开。';
                this.text = this.parseType(this.text);
                // var txtArr = this.parseCont(this.text);
                var letterText;
                var totalwidth = 0;
                var offsetx = 0;
                var offsety = 0;
                var line = 0;
                //根据"LayaBox"字符串长度创建单个字符，并对每个单独字符使用缓动动画
                var ti = 0;
                // var clueid = obj.clueid?obj.clueid:0;
                this.contLen = this.text.length;
                for (var i = 0; i < this.contLen; i++) {
                    //从"LayaBox"字符串中逐个提出单个字符创建文本
                    letterText = this.createLetter(this.text.charAt(i), i);
                    if (totalwidth < this.width) {
                        totalwidth += (letterText.width + 5);
                    }
                    if (offsetx >= this.width) {
                        offsetx = 0;
                        line++;
                    }
                    offsety = line * this.lineHeight;
                    //letterText.x = w/len*i+offsetX;
                    if (letterText.fontSize > 40) {
                        offsety = offsety - 20; //被放大的关键字Y轴上移
                    }
                    letterText.x = offsetx;
                    //文本的初始y属性
                    letterText.y = offsety;
                    if (offsetx < this.width) {
                        offsetx += letterText.width;
                    }
                    //对象letterText属性y从缓动目标的100向初始的y属性300运动，每次执行缓动效果需要3000毫秒，缓类型采用elasticOut函数方式，延迟间隔i*100毫秒执行。
                    var tween = Laya.Tween.to(letterText, { alpha: 1 }, this.showSpeed, null, Handler.create(this, this.showComplete, [{ index: i }]), i * this.printSpeed);
                    this.tweenList.push(tween);
                }
            };
            SoulTextBox.prototype.createTween_old = function () {
                //"LayaBox字符串总宽度"
                // var maxwidth:number = Laya.stage.width-100;
                //文本创建的起始位置(>>在此使用右移运算符，相当于/2 用>>效率更高)
                // var offsetX:number = Laya.stage.width - w >> 1;
                // this.contLen = this.text.length;
                this.text = this.parseType(this.text);
                var txtArr = this.parseCont(this.text);
                var letterText;
                var totalwidth = 0;
                var offsetx = 0;
                var offsety = 0;
                var line = 0;
                //根据"LayaBox"字符串长度创建单个字符，并对每个单独字符使用缓动动画
                var ti = 0;
                var arrLen = txtArr.length;
                for (var index = 0; index < arrLen; index++) {
                    var obj = txtArr[index];
                    var cont = obj.cont;
                    ///{clue:(\d+)}(.*?){\/clue}/g;
                    cont = cont.replace(/{(\/)?\w+(:\d+)?}/g, ''); //替换不存在的标签
                    var clueid = obj.clueid ? obj.clueid : 0;
                    var len = cont.length;
                    this.contLen += len;
                    for (var i = 0; i < len; i++) {
                        //从"LayaBox"字符串中逐个提出单个字符创建文本
                        letterText = this.createLetter(cont.charAt(i), clueid);
                        if (totalwidth < this.width) {
                            totalwidth += (letterText.width + 5);
                        }
                        if (offsetx >= this.width) {
                            offsetx = 0;
                            line++;
                        }
                        offsety = line * this.lineHeight;
                        letterText.x = offsetx;
                        //文本的初始y属性
                        letterText.y = offsety;
                        if (offsetx < this.width) {
                            offsetx += letterText.width;
                        }
                        //对象letterText属性y从缓动目标的100向初始的y属性300运动，每次执行缓动效果需要3000毫秒，缓类型采用elasticOut函数方式，延迟间隔i*100毫秒执行。
                        var tween = Laya.Tween.to(letterText, { alpha: 1 }, this.showSpeed, null, Handler.create(this, this.showComplete, [{ index: ti }]), ti * this.printSpeed);
                        this.tweenList.push(tween);
                        ti++;
                    }
                }
                this.contLen = ti;
                // console.log('ti='+ti);
            };
            SoulTextBox.prototype.showComplete = function (args) {
                if (this.completeHandler) {
                    if (args.index >= (this.contLen - 1)) {
                        this.isFinish = true;
                        this.completeHandler.runWith([{ auto: 1 }]);
                    }
                }
            };
            SoulTextBox.prototype.createTweenText = function (text) {
                //"LayaBox字符串总宽度"
                var maxwidth = Laya.stage.width - 100;
                //文本创建的起始位置(>>在此使用右移运算符，相当于/2 用>>效率更高)
                // var offsetX:number = Laya.stage.width - w >> 1;
                var letterText;
                var totalwidth = 0;
                var offsetx = 0;
                var offsety = 0;
                var line = 0;
                //根据"LayaBox"字符串长度创建单个字符，并对每个单独字符使用缓动动画
                for (var i = 0, len = text.length; i < len; ++i) {
                    //从"LayaBox"字符串中逐个提出单个字符创建文本
                    letterText = this.createLetter(text.charAt(i));
                    if (totalwidth < maxwidth) {
                        totalwidth += (letterText.width + 5);
                    }
                    if (offsetx >= maxwidth) {
                        offsetx = 0;
                        line++;
                    }
                    offsety = line * 35;
                    letterText.x = offsetx;
                    //文本的初始y属性
                    letterText.y = offsety;
                    if (offsetx < maxwidth) {
                        offsetx += letterText.width;
                    }
                    //对象letterText属性y从缓动目标的100向初始的y属性300运动，每次执行缓动效果需要3000毫秒，缓类型采用elasticOut函数方式，延迟间隔i*100毫秒执行。
                    Laya.Tween.to(letterText, { alpha: 1 }, this.showSpeed, null, null, i * this.printSpeed);
                }
            };
            //创建单个字符文本，并加载到舞台
            SoulTextBox.prototype.createLetter = function (char, index) {
                var letter = new Text();
                letter.text = char;
                letter.color = this.letterColor;
                letter.fontSize = this._fontSize;
                if (this.typeList[index]) {
                    if (this.typeList[index]['clue'] === 1) {
                        this.letterColor = '#dd0000';
                        letter.color = this.letterColor;
                    }
                    else if (this.typeList[index]['clue'] === 0) {
                        this.letterColor = '#ffffff';
                        letter.color = this.letterColor;
                    }
                    if (this.typeList[index]['big'] === 1) {
                        this._fontSize = this.fontBigSize;
                        letter.fontSize = this._fontSize;
                        this.letterColor = '#dddd00';
                        letter.color = this.letterColor;
                    }
                    else if (this.typeList[index]['big'] === 0) {
                        this.fontSize = this.fontSmallSize;
                        letter.fontSize = this._fontSize;
                        this.letterColor = '#ffffff';
                        letter.color = this.letterColor;
                    }
                }
                letter.font = this.font;
                letter.alpha = 0;
                this.addChild(letter);
                letter.zOrder = 10;
                return letter;
            };
            //创建单个字符文本，并加载到舞台
            SoulTextBox.prototype.createLetter_old = function (char, clueid) {
                var letter = new Text();
                letter.text = char;
                letter.color = "#ffffff";
                if (clueid && clueid > 0) {
                    letter.color = "#dd0000";
                }
                letter.font = this.font;
                letter.fontSize = this.fontSize;
                letter.alpha = 0;
                this.addChild(letter);
                letter.zOrder = 10;
                if (clueid && clueid > 0) {
                    //监听点击标签
                    // letter.on(Laya.Event.CLICK,this,this.OnLetter,[{clueid:clueid}]);                
                }
                return letter;
            };
            SoulTextBox.prototype.OnLetter = function (params) {
                // console.log(params);
                // console.log('点击标签');
            };
            return SoulTextBox;
        }(Box));
        common.SoulTextBox = SoulTextBox;
        var CircleImgBox = /** @class */ (function (_super) {
            __extends(CircleImgBox, _super);
            function CircleImgBox(width, height, imgurl) {
                var _this = _super.call(this) || this;
                _this.width = width;
                _this.height = height;
                _this.circleImg = new Image();
                _this.coverImg = new Image();
                //获取图片资源，绘制到画布
                // this.circleImg.loadImage(imgurl,0,0,width,height);
                //添加到舞台
                _this.addChild(_this.circleImg);
                _this.addChild(_this.coverImg);
                _this.circleImg.centerX = 0;
                _this.circleImg.centerY = 0;
                // this.circleImg.width = this.circleImg.width-10;
                // this.circleImg.height = this.circleImg.height-10;
                _this.coverImg.width = _this.width;
                _this.coverImg.height = _this.height;
                if (imgurl) {
                    _this.circleImg.skin = imgurl;
                    _this.circleImg.width = 110;
                    _this.circleImg.height = 110;
                }
                //创建遮罩对象
                _this.cMask = new Sprite();
                //画一个圆形的遮罩区域
                _this.cMask.graphics.drawCircle(0, 0, (_this.width - 7) / 2, "#ff0000");
                //圆形所在的位置坐标
                _this.cMask.pos(_this.width / 2, _this.height / 2);
                //实现img显示对象的遮罩效果
                _this.mask = _this.cMask;
                return _this;
            }
            Object.defineProperty(CircleImgBox.prototype, "head", {
                set: function (value) {
                    Laya.loader.load(value, Laya.Handler.create(this, function () {
                        this.circleImg.skin = value;
                        this.circleImg.height = ((this.width + 30) / this.circleImg.width) * this.circleImg.height;
                        this.circleImg.width = this.width + 30;
                    }));
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(CircleImgBox.prototype, "cover", {
                set: function (value) {
                    this.coverImg.skin = value;
                },
                enumerable: true,
                configurable: true
            });
            return CircleImgBox;
        }(Box));
        common.CircleImgBox = CircleImgBox;
        var PartBox = /** @class */ (function (_super) {
            __extends(PartBox, _super);
            function PartBox(view) {
                var _this = _super.call(this) || this;
                view.addChild(_this);
                _this.width = view.width;
                _this.height = view.height;
                return _this;
            }
            PartBox.prototype.loadPart = function (skyid, x, y) {
                this.skyid = skyid;
                this.skyBox = new common.SkyBox(this, x, y);
                this.skyBox.loadSky(skyid);
            };
            PartBox.prototype.clearSky = function () {
                if (this.skyBox) {
                    this.removeSelf();
                    // this.destroy(); //destroy 导致错误
                    // this.skyBox.clearSky();//
                }
            };
            return PartBox;
        }(Box));
        common.PartBox = PartBox;
        var SkyBox = /** @class */ (function (_super) {
            __extends(SkyBox, _super);
            function SkyBox(view, x, y) {
                var _this = _super.call(this) || this;
                _this.startX = 0;
                _this.startY = 0;
                view.addChild(_this);
                if (x) {
                    _this.startX = x;
                }
                if (y) {
                    _this.startY = y;
                }
                return _this;
            }
            //阳光天气透明完成。开始旋转
            SkyBox.prototype.sunImgShowCom = function () {
                Laya.Tween.to(this.sunImg, { rotation: 0 }, 4000);
            };
            //星星天气透明完成
            SkyBox.prototype.starImgCom = function (starObj) {
                Laya.Tween.to(starObj, { alpha: 0.3 }, 1000, null, Handler.create(this, this.starImgCom2, [starObj]));
            };
            //信息天气再次透明
            SkyBox.prototype.starImgCom2 = function (starObj) {
                Laya.Tween.to(starObj, { alpha: 1 }, 1000, null, Handler.create(this, this.starImgCom, [starObj]));
            };
            SkyBox.prototype.loadSky = function (skyid) {
                // if (skyid==3) {
                //     // this.partname.push({url: "part/Snowstorm.part", type: Laya.Loader.JSON});
                // }else if (skyid==5) {
                //     // this.partname.push({url: "part/Flame.part", type: Laya.Loader.JSON});
                // }
                // if (this.partname!='') {
                if (skyid == 1) {
                    this.sunImg = new LayaImage('read_dot_sunshine.png');
                    this.sunImg.rotation = -30;
                    this.sunImg.alpha = 0.3;
                    this.sunImg.y = 0;
                    this.sunImg.x = -120;
                    this.addChild(this.sunImg);
                    Laya.Tween.to(this.sunImg, { alpha: 1 }, 200, null, Handler.create(this, this.sunImgShowCom));
                }
                if (skyid == 2) {
                    //随机生成5-10星星
                    var starNum = jmt.util.Common.getRandom(5, 10);
                    var starImgArray = [];
                    for (var i = 0; i < starNum; i++) {
                        starImgArray[i] = new LayaImage('read_dot_star.png');
                        starImgArray[i].alpha = 0;
                        starImgArray[i].x = jmt.util.Common.getRandom(20, Laya.stage.width - 20);
                        starImgArray[i].y = jmt.util.Common.getRandom(20, Laya.stage.height / 2 - 100);
                        this.addChild(starImgArray[i]);
                        Laya.Tween.to(starImgArray[i], { alpha: 1 }, 1000, null, Handler.create(this, this.starImgCom, [starImgArray[i]]));
                    }
                }
                if (skyid == 3) {
                    this.partname = "part/Snowstorm.part";
                    var url = 'texture_snow.png';
                    // let snowResource: laya.resource.Resource = new laya.resource.Resource();
                    // snowResource._setUrl(url);
                    // snowResource.lock = true;
                    // CurrenResourceManager.addResource(snowResource);
                    Laya.loader.load(url, Handler.create(this, function () {
                        Laya.loader.load(this.partname, Handler.create(this, this.onAssetsLoaded, [this.partname]));
                    }));
                }
                if (skyid == 4) {
                    this.partname = "part/Rain.part";
                    var url = 'texture_rain.png';
                    // let snowResource: laya.resource.Resource = new laya.resource.Resource();
                    // snowResource._setUrl(url);
                    // snowResource.lock = true;
                    // CurrenResourceManager.addResource(snowResource);
                    Laya.loader.load(url, Handler.create(this, function () {
                        Laya.loader.load(this.partname, Handler.create(this, this.onAssetsLoaded, [this.partname]));
                    }));
                }
                if (skyid == 5) {
                    this.partname = "part/Flame.part";
                    var url = 'texture_flame.png';
                    Laya.loader.load(url, Handler.create(this, function () {
                        Laya.loader.load(this.partname, Handler.create(this, this.onAssetsLoaded, [this.partname]));
                    }));
                }
                // }            
            };
            SkyBox.prototype.clearSky = function () {
                if (this.sp) {
                    // this.sp.removeSelf();
                    // this.sp.destroy();
                    // this.removeSelf();//与destory冲突
                    // this.destroy();
                    this.sp.stop();
                }
                if (this.partname != '') {
                    // jmt.Resource.clearTextureRes(this.partname);
                }
            };
            SkyBox.prototype.onAssetsLoaded = function (url, settings) {
                this.sp = new Particle2D(settings);
                // this.sp.load(url);
                this.sp.url = url;
                this.sp.load(url);
                this.sp.emitter.start();
                this.sp.play();
                this.addChild(this.sp);
                this.sp.x = this.startX;
                this.sp.y = this.startY;
            };
            return SkyBox;
        }(Box));
        common.SkyBox = SkyBox;
    })(common = jmt.common || (jmt.common = {}));
})(jmt || (jmt = {}));
//# sourceMappingURL=Common.js.map