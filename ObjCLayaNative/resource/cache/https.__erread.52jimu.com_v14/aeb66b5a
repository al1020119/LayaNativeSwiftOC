var HttpUtil = /** @class */ (function () {
    // protected errcallback:any;
    // protected caller:any;
    // protected http:Laya.HttpRequest;
    function HttpUtil() {
        // this.http = new Laya.HttpRequest;
    }
    HttpUtil.ak = function () {
        return XcryUtil.uc(HttpUtil.ak1() + HttpUtil.ak2() + HttpUtil.ak3());
    };
    HttpUtil.ak1 = function () {
        return 'Qe%9A%99f%97%98';
    };
    HttpUtil.ak2 = function () {
        return '%95%C6%9Cn%9B%99n%9E%99%96%93%97%C9';
    };
    HttpUtil.ak3 = function () {
        return '%95jq%9A%93fmljn%9D%9A';
    };
    HttpUtil.cn = function () {
        return XcryUtil.uc('Ip%80%BC%D0%D5');
    };
    HttpUtil.akn = function () {
        return XcryUtil.uc('g%D1%E0%DB%D0%DE');
    };
    HttpUtil.ctn = function () {
        return XcryUtil.uc('O%B2%DD%E2%D9%D3%E2%A1%81%CD%E9%D5');
    };
    HttpUtil.ctnc = function () {
        return XcryUtil.uc('%82%D1%E0%DC%D5%CC%C4%D5%DD%D8%DD%9D%A7%A5%A4%EE%EE%A4%93%D5%E1%DF%9A%A2%E7%DE%D1%D3%D1%D2%D3%C9%C9');
    };
    HttpUtil.s = function (time) {
        var mid = jmt.Api.getMid();
        var appkey = HttpUtil.ak();
        var appkeyname = HttpUtil.akn();
        var str = 'pl=' + jmt.Config.PLATFORM + '&uid=' + jmt.Data.uid + '&vn=' + jmt.Config.VN + '&mid=' + mid + '&time=' + time + '&' + appkeyname + '=' + appkey;
        // console.log(str);
        var hash = XcryUtil.md5(str);
        return hash;
    };
    HttpUtil.prototype.get = function (url, callback, responseType) {
        if (responseType === void 0) { responseType = 'text'; }
        if (!url) {
            return;
        }
        var http = new Laya.HttpRequest();
        HttpRequestArr.push(http);
        var timestamp = new Date().getTime();
        var time = Math.floor(timestamp / 1000);
        url += '&time=' + time;
        var sign = HttpUtil.s(time);
        var conttypename = HttpUtil.ctn();
        var csignname = HttpUtil.cn();
        var conttype = HttpUtil.ctnc();
        var headers = [
            conttypename, conttype,
            csignname, sign
        ];
        // this.caller = caller;
        this.callbackHandler = callback;
        // this.errcallback = errcallback;
        //this.http.once(Laya.Event.PROGRESS, this, this.onHttpRequestProgress);
        http.once(Laya.Event.COMPLETE, this, this.onHttpRequestComplete, [callback, http]);
        http.once(Laya.Event.ERROR, this, this.onHttpRequestError, [callback, http]);
        http.send(url, null, 'get', responseType, headers);
        return this;
    };
    HttpUtil.prototype.post = function (url, data, callback, responseType) {
        if (responseType === void 0) { responseType = 'text'; }
        if (!url) {
            return;
        }
        var http = new Laya.HttpRequest();
        HttpRequestArr.push(http);
        // if (data) {
        //     jmt.Console.log(url+'&'+data);
        // }else{
        //     jmt.Console.log(url);
        // } 
        var timestamp = new Date().getTime();
        var time = Math.floor(timestamp / 1000);
        url += '&time=' + time;
        var sign = HttpUtil.s(time);
        var conttypename = HttpUtil.ctn();
        var csignname = HttpUtil.cn();
        var conttype = HttpUtil.ctnc();
        var headers = [
            conttypename, conttype,
            csignname, sign
        ];
        // jmt.Print.log('进入post了'+ this.num);
        // jmt.Print.log(typeof http);
        // this.caller = caller;
        // this.callbackHandler = callback;
        // this.errcallback = errcallback;
        // jmt.Print.log(typeof callback);
        //this.http.once(Laya.Event.PROGRESS, this, this.onHttpRequestProgress);
        http.once(Laya.Event.COMPLETE, this, this.onHttpRequestComplete.bind(this, callback, http));
        http.once(Laya.Event.ERROR, this, this.onHttpRequestError.bind(this, callback, http));
        http.send(url, data, 'post', responseType, headers);
        return this;
    };
    //删除XMLHttpRequest,防止太多了
    HttpUtil.prototype.deleteHttpRequest = function (h) {
        var index = HttpRequestArr.indexOf(h);
        if (index >= 0) {
            HttpRequestArr.splice(index, 1);
        }
    };
    HttpUtil.prototype.onHttpRequestError = function (callback, http, e) {
        // jmt.Print.log('进入error了');
        this.deleteHttpRequest(http);
        // jmt.Print.log('http'+http);
        // jmt.Print.log('error 1111111111');
        // console.log('=============http error=================');
        // // console.log(callback);
        // console.log(e);
        // jmt.Print.log(e);
        if (callback) {
            callback.runWith([{ code: 0, msg: '未知错误: http' }]);
        }
    };
    HttpUtil.prototype.onHttpRequestComplete = function (callback, http, e) {
        // jmt.Print.log('进入complete了');
        this.deleteHttpRequest(http);
        // jmt.Print.log('http'+http);
        // jmt.Print.log('=============http=================');
        // jmt.Print.log('suc 1111111111');
        // console.log(callback);
        // jmt.Print.log('=============http=================');
        // console.log(e);
        // jmt.Print.log(e);
        // jmt.Print.log('suc 1111111111');
        // jmt.Print.log(JSON.stringify(e));
        if (callback) {
            try {
                // this.http.offAll();
                // 因为QQ轻游戏那边只有一个回调，请求错误也走一个回调， 带两个参数，第二个参数存在，就是错误信息，我这里解析这个字段，然后就会报错，然后就执行错误提示
                var data = JSON.parse(e);
                callback.runWith([data]);
            }
            catch (error) {
                // jmt.Print.log('error了');
                // jmt.Print.log(JSON.stringify(error));
                if (callback) {
                    callback.runWith([{ code: 0, msg: '未知错误' }]);
                }
            }
        }
    };
    return HttpUtil;
}());
//# sourceMappingURL=HttpUtil.js.map