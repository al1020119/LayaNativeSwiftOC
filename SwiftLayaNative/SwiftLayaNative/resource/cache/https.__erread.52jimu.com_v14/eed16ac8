var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ReadingView = (function (_super) {
    __extends(ReadingView, _super);
    function ReadingView(chapterid) {
        var _this = _super.call(this) || this;
        _this.name = 'ReadingView';
        _this.i = 0;
        _this.questionProgressCount = 0; //追问进度计数  上一个计数
        _this.playState = 0; //播放模式，0正常，1自动，2快进
        _this.showType = 0; //显示样式类型，0-底部对话框，1-黑屏/白屏居中文字
        _this.sounds = [];
        _this.conid = 0;
        _this.readindex = 0; //内容阅读索引
        _this.subreadindex = 0; //子内容阅读索引
        _this.isJump = false; //支线跳回主线，是否是读档进来的
        _this.contNum = 0; //内容数量
        _this.showNum = 0; //当前显示的分隔内容索引
        _this.subcontNum = 0; //子内容索引
        _this.cangonext = true; //是否可以往下阅读
        _this.isPlaying = false; //正在打印文字
        _this.isVoicing = false; //正在说话
        _this.isEffecting = false; //正在播放特效
        _this.isDelay = false; //打印文字结束延时
        _this.waitClick = false;
        _this.nbindex = 0; //获取当前章节内容的下一组章节内容
        _this.current_nbindex = 0;
        _this.branch_nbindex = 0;
        _this.currentRoadAB = SpeakType.roadA; //保存路人当前的类型。首次是路人A
        _this.oldRoadId = ''; //上次内容的路人id;
        // Bridge.instans.openToast('aaaaaaaaa');
        // 第1章开始启动 定时赠送道具
        // 在QQ轻游戏上   // 在微信端 ios上
        // if(WywUtil.onLimixiu() || WxUtil.onWxIOS()){
        //     new game.setTimeProp(this.stopAuto.bind(this));
        // }
        //平台，为了兼容零下记忆
        if (jmt.Config.NOVELID == 10000) {
            // 除了微信 安卓付费了不弹出 送道具，其他的都弹出
            if (Laya.Browser.onMiniGame && Laya.Browser.onAndroid && jmt.GlobalData.PACKGE.all.isbuy) {
            }
            else {
                game.setTimeProp.instance;
                game.setTimeProp.instance.stopFast(_this.stopAuto.bind(_this));
            }
        }
        // if(WywUtil.onLimixiu() || WxUtil.onWxIOS()){
        //     new game.setTimeProp(this.stopAuto.bind(this));
        // }
        _this.height = Laya.stage.height;
        _this.width = Laya.stage.width;
        _this.initUi(); //初始化显示按钮
        //判断是不是平台预览
        //如果是预览，初始化UI后直接退出
        if (jmt.Config.PREVIEW) {
            return _this;
        }
        Laya.timer.loop(45000, _this, _this.syncStore); //定时同步
        // jmt.Print.log('重头开始111111111111111111'); 
        if (chapterid) {
            var apiUtil = new ApiUtil();
            apiUtil.Stat(jmt.Stat.PAGE_READING, jmt.Stat.ACT_ENTER_READING, chapterid, 0, jmt.Data.chapterinfo.branchid); //开始阅读统计
        }
        _this.loadContent(chapterid); //加载章节内容
        // jmt.Print.log(chapterid);
        //有时候加载广告过慢，导致banner广告会出现在阅读界面，3秒轮询一次，清除banner广告
        Laya.timer.once(3000, null, function () {
            WywUtil.desQQbanner();
        });
        return _this;
        // let a = new ChapterUnlock(jmt.Data.chapterinfo);
        // Laya.stage.addChild(a);
        // a.zOrder = 10000;
    }
    ReadingView.instans = function (chapterid) {
        if (!ReadingView._instans) {
            ReadingView._instans = new ReadingView(chapterid);
        }
        return ReadingView._instans;
    };
    //清除阅读界面
    ReadingView.prototype.clearReading = function () {
        if (ReadingView._instans) {
            // ReadingView._instans.pletfromRoleCover.clearRoleImage(); //清除人物图片
            SpeakManager._instance = null;
            ReadingView._instans.removeSelf();
            ReadingView._instans = null;
        }
    };
    //定时同步存档
    ReadingView.prototype.syncStore = function () {
        //判断是不是平台预览 //判断是否登录，未登录调取android登录  //判断是不是浏览器分享
        if (jmt.Config.PREVIEW || !jmt.Config.ISLOGIN || jmt.Config.ISSHAREBROWSER) {
            return;
        }
        var storeinfo = jmt.Data.getCurrentStore();
        var readloglist = jmt.Data.getReadLoglist();
        // console.log('同步存档');
        // console.log(storeinfo);
        // console.log(readloglist);
        if (storeinfo && readloglist) {
            storeinfo.index = 0;
            var apiUtil = new ApiUtil();
            apiUtil.syncReading(jmt.Data.chapterinfo.issession, storeinfo, readloglist, Handler.create(this, this.syncStoreSuc));
        }
    };
    //同步存档成功
    ReadingView.prototype.syncStoreSuc = function (res) {
        // console.log(res);
        jmt.Data.removeItem(jmt.Data.logkey);
        jmt.Data.removeItem(jmt.Data.existlogkey);
    };
    ReadingView.prototype.initUi = function () {
        this.bgBox = new game.BackgroundBox(this);
        this.bgBox.zOrder = 0;
        this.bgBox.on(LayaEvent.CLICK, this, this.OnState);
        // console.log('初始化UI');
        this.initMenu();
        this.initPlayMenu();
        //平台，为了兼容零下记忆
        if (jmt.Config.NOVELID != 10000) {
            //先把所有的说话UI初始化出来
            this.speakManager = SpeakManager.instance();
            this.readMore = new ReadMoreBtn();
            this.addChild(this.readMore);
            this.readMore.zOrder = 999;
            //浏览器分享链接，不显示下面两个按钮
            // jmt.Config.ISSHAREBROWSER && (return);
            if (jmt.Config.ISSHAREBROWSER)
                return;
            this.readBackImg = new ReadBackBtn();
            this.addChild(this.readBackImg);
            this.readBackImg.zOrder = 999;
            this.readReview = new ReadReviewBtn();
            this.addChild(this.readReview);
            this.readReview.zOrder = 999;
        }
        // if (jmt.Config.DEBUG) {
        //     let debugBtn = new Laya.Button('skin/common/chapter_pay_red_ring.png');
        //     debugBtn.label = '';
        //     debugBtn.stateNum=1;
        //     debugBtn.labelSize = 50;
        //     this.addChild(debugBtn);
        //     debugBtn.zOrder=999;
        //     debugBtn.left=20;
        //     debugBtn.top=200;
        //     debugBtn.on(LayaEvent.CLICK,this,()=>{
        //         let promptView = new PromptInView('请输入阅读索引',Handler.create(this,this.jumpRead));
        //         promptView.popup();
        //     })
        // }
        //判断是不是平台预览
        if (!jmt.Config.PREVIEW) {
            var apiUtil = new ApiUtil();
            apiUtil.getMsgCount(Handler.create(this, this.initMsgCount));
        }
    };
    // jumpRead(conid: any):void{
    //     // readindex = parseInt(readindex);
    //     // if (readindex>0) {
    //     //     this.readindex = readindex;
    //     //     this.OnState();
    //     // }   
    //     jmt.Data.chapterinfo.show_conid=conid;
    //     this.loadContent();             
    // }
    ReadingView.prototype.initMsgCount = function (res) {
        if (res) {
            if (res.clue_num) {
                this.showReadPoint(ReadingView.MENU_CLUE);
            }
            if (res.sku_num) {
                this.showReadPoint(ReadingView.MENU_SKU);
            }
            if (res.role_num) {
                this.showReadPoint(ReadingView.MENU_COVER);
            }
        }
    };
    /**
     * 播放按钮
     */
    ReadingView.prototype.initPlayMenu = function () {
        //平台，为了兼容零下记忆
        if (jmt.Config.NOVELID != 10000) {
        }
        this.playBtn = new LayaButton(jmt.Skin.READ_AUTO_PLAY);
        this.playBtn.zOrder = 990;
        this.addChild(this.playBtn);
        this.playBtn.stateNum = 1;
        this.playBtn.bottom = 300;
        this.playBtn.left = 0;
        this.playBtn.visible = false;
        this.playBtn.on(LayaEvent.CLICK, this, this.autoPlay);
        if (jmt.Data.chapterinfo && jmt.Data.chapterinfo.iscomplete) {
            this.autoBtn = new LayaButton(jmt.Skin.READ_AUTO_FAST);
            this.autoBtn.zOrder = 990;
            this.addChild(this.autoBtn);
            this.autoBtn.stateNum = 1;
            this.autoBtn.bottom = 400;
            this.autoBtn.left = 0;
            this.autoBtn.visible = false;
            this.autoBtn.on(LayaEvent.CLICK, this, this.isBuyPackage);
        }
        //平台，为了兼容零下记忆
        if (jmt.Config.NOVELID != 10000) {
        }
    };
    // QQ看视频解锁快进功能
    ReadingView.prototype.isBuyPackage = function () {
        var fast = Laya.LocalStorage.getItem(jmt.Data.unlockFast);
        fast = '1';
        if (!fast) {
            var vsPrompt = new game.lookVedioOrShare('观看视频解锁快进功能~', '观看视频', 0, 0, 0, 8, 0, 0, 0, Handler.create(this, this.autoFast));
            vsPrompt.popup();
        }
        else {
            this.autoFast();
        }
    };
    /**
     * 自动播放
     */
    ReadingView.prototype.autoPlay = function () {
        //禁用快进的点击事件
        // console.log(this.playState)
        if (this.autoBtn) {
            this.autoBtn.off(LayaEvent.CLICK, this, this.isBuyPackage);
        }
        if (this.playState == 1) {
            this.stopAuto();
            return;
        }
        this.playState = 1;
        if (this.playBtn) {
            this.playBtn.skin = jmt.Skin.READ_AUTO_PAUSE;
        }
        // if (this.chatbox) {
        //     this.chatbox.showSpeed=10;
        //     this.chatbox.printSpeed=8;
        // }  
        // if (this.midChatbox) {
        //     this.midChatbox.showSpeed=10;
        //     this.midChatbox.printSpeed=8;
        // } 
        this.OnState();
    };
    /**
     * 快进
     */
    ReadingView.prototype.autoFast = function () {
        WywUtil.unlockFast();
        //禁用播放的点击事件
        if (this.playBtn) {
            this.playBtn.off(LayaEvent.CLICK, this, this.autoPlay);
        }
        if (this.playState == 2) {
            this.stopAuto();
            return;
        }
        this.playState = 2;
        if (this.autoBtn) {
            this.autoBtn.skin = jmt.Skin.READ_AUTO_PAUSE;
        }
        if (this.chatbox) {
            this.chatbox.showSpeed = 10;
            this.chatbox.printSpeed = 8;
        }
        if (this.midChatbox) {
            this.midChatbox.showSpeed = 10;
            this.midChatbox.printSpeed = 8;
        }
        //平台的说话功能，快进
        this.platformChangeSpeakSpeed(10, 8);
        this.OnState();
    };
    /**
     * 暂停
     */
    ReadingView.prototype.stopAuto = function (oldState) {
        if (oldState === void 0) { oldState = false; }
        // if (this.playState==0) {
        //     return;
        // }
        if (oldState) {
            //保存旧状态以便恢复
            this.oldPlayState = this.playState;
        }
        this.playState = 0;
        if (this.autoBtn) {
            this.autoBtn.skin = jmt.Skin.READ_AUTO_FAST;
            //开启快进的点击事件
            this.autoBtn.on(LayaEvent.CLICK, this, this.isBuyPackage);
        }
        if (this.playBtn) {
            this.playBtn.skin = jmt.Skin.READ_AUTO_PLAY;
            //开启播放的点击事件
            this.playBtn.on(LayaEvent.CLICK, this, this.autoPlay);
        }
        if (this.chatbox) {
            this.chatbox.showSpeed = 200;
            this.chatbox.printSpeed = 30;
        }
        if (this.midChatbox) {
            this.midChatbox.showSpeed = 200;
            this.midChatbox.printSpeed = 30;
        }
        //平台的说话功能，停止快进
        this.platformChangeSpeakSpeed(100, 40);
    };
    //平台改变对话框说话速度，用于快进和停止快进
    ReadingView.prototype.platformChangeSpeakSpeed = function (showSpeed, printSpeed) {
        if (this.speakManager) {
            var speakDic = this.speakManager.speakDic.container;
            for (var key in speakDic) {
                if (speakDic.hasOwnProperty(key)) {
                    var element = speakDic[key];
                    element.printControl.showSpeed = showSpeed;
                    element.printControl.printSpeed = printSpeed;
                }
            }
        }
    };
    ReadingView.prototype.initMenu = function () {
        //平台，为了兼容零下记忆
        if (jmt.Config.NOVELID != 10000) {
            return;
        }
        this.topMenu = new LayaBox();
        this.topMenu.left = 30;
        this.topMenu.top = 30;
        this.topMenu.width = 360;
        this.topMenu.height = 110;
        this.topMenu.zOrder = 1000;
        // Laya.stage.addChild(this.topMenu);
        this.addChild(this.topMenu);
        this.menuList = new LayaList();
        this.menuList.spaceX = 5;
        this.menuList.itemRender = jmt.item.MenuListItem;
        this.menuList.repeatX = 4;
        this.menuList.repeatY = 1;
        // 使用但隐藏滚动条
        // this.menuList.vScrollBarSkin = "";
        this.menuList.mouseEnabled = true;
        this.menuList.mouseHandler = new Handler(this, this.onMenuSelect);
        this.menuList.renderHandler = new Handler(this, this.updateMenuItem);
        this.topMenu.addChild(this.menuList);
        this.menuList.top = 0;
        this.menuList.bottom = 0;
        this.menuList.left = 0;
        this.menuList.right = 0;
        var cluenum = jmt.Data.storeinfo ? (jmt.Data.storeinfo.clues ? jmt.Data.storeinfo.clues : 0) : 0;
        var totalnum = jmt.Data.novelinfo ? jmt.Data.novelinfo.clues : 0;
        var cluetitle = '(' + cluenum + '/' + totalnum + ')';
        // 设置数据项为对应图片的路径
        var data = [
            {
                icon: jmt.Skin.READ_MENU_SYS,
                type: 1
            },
            {
                icon: jmt.Skin.READ_MENU_SKU,
                type: 2
            },
            {
                icon: jmt.Skin.READ_MENU_COVER,
                type: 3
            },
            {
                icon: jmt.Skin.READ_MENU_CLUE,
                type: 4,
                title: cluetitle
            }
        ];
        this.menuList.array = data;
        //平台，为了兼容零下记忆
        if (jmt.Config.NOVELID != 10000) {
            this.menuList.visible = false;
        }
    };
    /**
     * 显示红点
     * @param index
     */
    ReadingView.prototype.showReadPoint = function (index, title, playbig, showpoint) {
        if (playbig === void 0) { playbig = false; }
        if (showpoint === void 0) { showpoint = 1; }
        //平台，为了兼容零下记忆
        if (jmt.Config.NOVELID != 10000) {
            return;
        }
        var currentitem = this.menuList.getItem(index);
        // if (jmt.Config.DEBUG) {
        //     console.log('========clue========');
        //     console.log(title);
        //     console.log(currentitem);
        // }
        if (!currentitem) {
            return;
        }
        currentitem.point = showpoint;
        if (title) {
            currentitem.title = title;
        }
        if (playbig) {
            currentitem.playbig = true;
        }
        this.menuList.changeItem(index, currentitem);
    };
    /**
     * 隐藏红点
     * @param index
     */
    ReadingView.prototype.hideReadPoint = function (index) {
        var currentitem = this.menuList.getItem(index);
        if (!currentitem) {
            return;
        }
        currentitem.point = 0;
        this.menuList.changeItem(index, currentitem);
    };
    ReadingView.prototype.onMenuSelect = function (e, index) {
        if (e.type == Laya.Event.CLICK) {
            var currentitem = this.menuList.getItem(index);
            if (!currentitem) {
                return;
            }
            if (currentitem.type == 1) {
                this.hideReadPoint(ReadingView.MENU_SYS);
                this.OnSys();
            }
            else if (currentitem.type == 2) {
                this.hideReadPoint(ReadingView.MENU_SKU);
                this.OnSku();
            }
            else if (currentitem.type == 3) {
                this.hideReadPoint(ReadingView.MENU_COVER);
                this.OnCover();
            }
            else if (currentitem.type == 4) {
                this.hideReadPoint(ReadingView.MENU_CLUE);
                this.showClueView(1);
                var apiUtil2 = new ApiUtil();
                apiUtil2.Stat(jmt.Stat.PAGE_READING, jmt.Stat.ACT_READ_CLUE);
            }
        }
    };
    ReadingView.prototype.updateMenuItem = function (cell, index) {
        cell.setData(cell.dataSource);
    };
    ReadingView.prototype.OnSku = function () {
        var apiUtil2 = new ApiUtil();
        apiUtil2.Stat(jmt.Stat.PAGE_READING, jmt.Stat.ACT_READ_SKU);
        // 进入这个节目，如果还在快进，就停止快进
        if (this.playState == 2 || this.playState == 1) {
            this.stopAuto();
        }
        var skuView = new SkuView();
        skuView.width = Laya.stage.width;
        skuView.height = Laya.stage.height;
        // this.addChild(skuView);
        skuView.popup();
        // console.log(skuView.zOrder);
        // console.log(this.zOrder);
    };
    ReadingView.prototype.OnSys = function () {
        var apiUtil2 = new ApiUtil();
        apiUtil2.Stat(jmt.Stat.PAGE_READING, jmt.Stat.ACT_READ_SYS);
        // var sysView: SystemView = new SystemView();
        // sysView.popup();
        // 进入这个节目，如果还在快进，就停止快进
        if (this.playState == 2 || this.playState == 1) {
            this.stopAuto();
        }
        //不同界面显示不同 系统界面
        if (Laya.Browser.onMiniGame) {
            if (Laya.Browser.onAndroid) {
                //微信在安卓上 付费界面
                var SystemView_1 = new SystemSetting(jmt.GlobalData.PACKGE);
                SystemView_1.popup();
            }
            if (Laya.Browser.onIOS || Laya.Browser.onIPhone || Laya.Browser.onIPad) {
                //微信在ios上 不付费界面
                var System = new SystemView();
                System.popup();
            }
        }
        else {
            //QQ轻游戏 不付费界面
            var System = new SystemView();
            System.popup();
        }
    };
    ReadingView.prototype.OnCover = function () {
        var apiUtil2 = new ApiUtil();
        apiUtil2.Stat(jmt.Stat.PAGE_READING, jmt.Stat.ACT_READ_COVER);
        // 进入这个节目，如果还在快进，就停止快进
        if (this.playState == 2 || this.playState == 1) {
            this.stopAuto();
        }
        var coverBox = new RoleCoverView();
        coverBox.popup();
    };
    /**
     * 加载新章节
     * @param info
     */
    ReadingView.prototype.initGame = function (info) {
        if (info) {
            jmt.Data.chapterinfo = info;
            GameMain.initGame({ chapterinfo: jmt.Data.chapterinfo });
        }
    };
    ReadingView.prototype.loadChapter = function (info) {
        // console.log('加载得到章节信息');
        // console.log(info);
        if (info) {
            jmt.Data.chapterinfo = info;
            this.loadContent();
        }
        else {
            jmt.common.Toast.error('获取章节信息失败');
        }
    };
    //读档过来，或者支线跳回主线，拿到showinfo的数据，里面有coid/nbindex/bgmfile/bgfile/skid
    // jumpCon(): void{
    //     //读档过来的
    //     this.jumpConid = jmt.Data.showinfo.conid;
    // }
    ReadingView.prototype.loadContent = function (chapterid) {
        if (!chapterid) {
            chapterid = jmt.Data.chapterinfo.chapterid;
        }
        this.cangonext = false;
        if (chapterid < 1) {
            jmt.common.Toast.error('参数错误');
            return;
        }
        // console.log(chapterid);
        // jmt.Print.log(jmt.Data.chapterinfo);
        // jmt.Print.log('loadContent');
        var nbindex;
        if (jmt.Data.chapterinfo && jmt.Data.chapterinfo.branchinfo) {
            nbindex = this.branch_nbindex;
        }
        else {
            nbindex = this.nbindex;
            if (this.isJump) {
                nbindex = jmt.Data.showinfo.nbindex;
            }
        }
        // console.log('1111111111111111111111111111111');
        // console.log('nbindex:'+nbindex);
        //章节内容
        var apiUtil = new ApiUtil();
        apiUtil.getChapterContent(chapterid, nbindex, Handler.create(this, this.initContent), Handler.create(this, this.OnError));
    };
    //改变对话框弹出效果
    ReadingView.prototype.popupEffect = function (dialog) {
        // console.log(args);
        dialog.scale(1, 1);
        dialog.alpha = 1;
        Laya.Tween.from(dialog, { x: Laya.stage.width / 2, y: Laya.stage.height / 2, scaleX: 0.5, scaleY: 0.5, alpha: 0 }, 100);
    };
    /**
     * 重置内容
     */
    ReadingView.prototype.resetContent = function () {
        // jmt.Print.log('resetContent');
        this.bgFile = '';
        this.bgmFile = '';
        this.readindex = 0;
        this.subreadindex = 0;
        this.conid = 0;
        this.conlist = null;
        this.cover = '';
        this.coninfo = null;
        this.contArr = null;
        this.contNum = 0;
        this.showNum = 0;
        this.contType = 0;
        this.subconlist = [];
        this.subcontNum = 0;
        this.subconinfo = null;
        this.cangonext = true;
        this.isPlaying = false;
        this.isDelay = false;
    };
    /**
     * 初始化阅读内容
     * @param res
     */
    ReadingView.prototype.initContent = function (res) {
        var _this = this;
        this.resetContent(); //重置内容
        // console.log(res);
        // console.log('章节内容');
        // console.log(res);
        //判断是不是平台预览
        if (jmt.Config.PREVIEW) {
            this.readReview.visible = false;
            this.readMore.visible = false;
        }
        this.conlist = res.conlist;
        this.nbindex = res.nbindex;
        // jmt.Print.log('预览章节内容');
        // jmt.Print.log(this.conlist);
        //平台，为了兼容零下记忆
        if (jmt.Config.NOVELID != 10000) {
            this.isbuy = res.isbuy; //平台章节购买信息
        }
        // let aa: LayaLabel = new LayaLabel('章节过渡');
        // aa.top = 100;
        // aa.left = 100;
        // aa.fontSize = 50;
        // aa.color = '#ff0000';
        // this.addChild(aa);
        // aa.on(Laya.Event.CLICK, this, function bb(){
        //     Bridge.instans.openChapterTranstion(jmt.Data.novelinfo, jmt.Data.chapterinfo, this.isbuy);
        // });
        // let bb: LayaLabel = new LayaLabel('章节支付');
        // bb.top = 200;
        // bb.left = 200;
        // bb.fontSize = 50;
        // bb.color = '#ff0000';
        // this.addChild(bb);
        // bb.on(Laya.Event.CLICK, this, function cc(){
        //     Bridge.instans.openChapterPay(jmt.Data.chapterinfo, this.isbuy);
        // });
        // jmt.Print.log('initContent');
        //跳转内容（存档、副本回主线）
        this.jumpToCont();
        // delete jmt.Data.chapterinfo.show_nbindex;
        delete jmt.Data.chapterinfo.show_conid;
        // jmt.Print.log('jumpToCont');
        if (jmt.Data.chapterinfo && jmt.Data.chapterinfo.branchinfo) {
            // console.log(res);
            // console.log(jmt.Data.chapterinfo.branchinfo);
            if (jmt.Data.chapterinfo.branchinfo.type == jmt.Branch.TYPE_SERIES) {
                // console.log(this.conlist);
                var intoZuiWenView = function () {
                    _this.questionProgress = new game.QuestionProgress(_this, _this.conlist);
                    _this.questionProgress.zOrder = 1000;
                    // console.log(this.readindex);
                    //初始化
                    if (_this.readindex > 0) {
                        // console.log(jmt.Data.storeinfo.serieslist);
                        for (var i = 0; i < _this.readindex; i++) {
                            _this.keepQuestionProgressIsRight(jmt.Data.storeinfo.serieslist[i], i);
                            _this.keepQuestionProgressRedCircle(i);
                        }
                    }
                    if (_this.readindex == 0) {
                        //辩驳开始
                        // UIConfig.closeDialogOnSide=true;
                        var imgView = new ImageBoxView(jmt.Skin.READ_REFUTE_START);
                        imgView.popup();
                    }
                };
                // if (this.readindex == 0) {
                //     if(!this.isFirstOption){
                //         new game.intoBeforeLookVedio(jmt.QQresType.QUESTION, intoZuiWenView);
                //         this.isFirstOption = 1;
                //     }
                // }else{
                intoZuiWenView();
            }
        }
        if (this.bgBox) {
            this.bgBox.removeError();
        }
        if (this.conlist) {
            this.OnState();
        }
    };
    /**
     * 跳转内容
     */
    ReadingView.prototype.jumpToCont = function () {
        //如果是支线之类的跳转，或者读档
        //判断是不是平台预览
        if (this.isJump || jmt.Config.PREVIEW) {
            // console.log('...........')
            // console.log('替换内容');
            var bgfile;
            var bgmfile;
            for (var index = 0; index < this.conlist.length; index++) {
                var element = this.conlist[index];
                if (element.bgfile && element.bgfile != '' && element.bgfile != 'follow' && element.bgfile != 'clear') {
                    bgfile = element.bgfile;
                }
                if (element.bgmfile && element.bgmfile != '' && element.bgmfile != 'follow' && element.bgmfile != 'clear') {
                    bgmfile = element.bgmfile;
                }
                if (element.conid == jmt.Data.showinfo.conid) {
                    this.readindex = index;
                    //跳出支线设置跟随场景
                    if (element.bgfile == 'follow' && bgfile) {
                        this.conlist[index]['bgfile'] = bgfile;
                    }
                    else if (jmt.Data.showinfo.bgfile) {
                        this.conlist[index]['bgfile'] = jmt.Data.showinfo.bgfile;
                    }
                    if (element.bgmfile == 'follow' && bgmfile) {
                        this.conlist[index]['bgmfile'] = bgmfile;
                    }
                    else if (jmt.Data.showinfo.bgmfile) {
                        this.conlist[index]['bgmfile'] = jmt.Data.showinfo.bgmfile;
                    }
                    if (jmt.Data.showinfo.skyid) {
                        this.conlist[index]['skyid'] = jmt.Data.showinfo.skyid;
                    }
                    jmt.Data.showinfo = null;
                    this.isJump = false;
                    break;
                }
            }
        }
    };
    ReadingView.prototype.OnError = function () {
        // if (jmt.Config.DEBUG) {
        //     console.log('OnError');
        // }
        this.cangonext = true;
        this.bgBox.error();
    };
    ReadingView.prototype.OnState = function (e) {
        // jmt.Print.log('重头开始22222222222222'); 
        // if (jmt.Config.DEBUG) {
        //     jmt.Console.log('isDelay: '+this.isDelay);
        //     jmt.Console.log('cango: '+this.cangonext);
        //     jmt.Console.log('OnState isPlaying: '+this.isPlaying);
        //     jmt.Console.log('waitClick: '+this.waitClick);
        // }
        //清除掉banner广告
        WywUtil.desQQbanner();
        // console.log(this.readindex);
        // jmt.Print.log(this.conlist);
        if (!this.conlist) {
            //重新加载内容
            // jmt.Print.log('none conlist');
            this.loadContent();
            // jmt.Print.log(1);
            return;
        }
        if (this.isDelay) {
            // jmt.Print.log(2);
            return; //延时点击
        }
        //平台，为了兼容零下记忆
        if (jmt.Config.NOVELID != 10000) {
            //如果正在打字，立刻完成打字
            if (this.isPlaying && this.speakType != SpeakType.picture) {
                if (this.roleSpeak) {
                    // console.log(55555555555555);
                    this.roleSpeak.printControl.finish();
                }
                return;
            }
        }
        if (this.isPlaying) {
            //正在打字，立刻完成打字
            if (this.chatbox) {
                this.chatbox.goComplete();
            }
            if (this.midChatbox) {
                this.midChatbox.goComplete();
            }
            // jmt.Print.log(3);
            return;
        }
        if (this.isEffecting) {
            return;
        }
        if (!this.cangonext) {
            // this.stopAuto();
            // jmt.Print.log(4);
            return;
        }
        // console.log(jmt.Data.chapterinfo.branchinfo);
        //轮播图片
        if (jmt.Data.chapterinfo.branchinfo && jmt.Data.chapterinfo.branchinfo.type == 5) {
            if (this.autoBtn) {
                this.autoBtn.visible = false;
            }
            if (this.playBtn) {
                this.playBtn.visible = false;
            }
            var sw = new game.Swiper(this, this.conlist, Handler.create(this, this.checkNextChapter));
            sw.zOrder = 999;
            return;
        }
        else {
            if (this.autoBtn) {
                this.autoBtn.visible = true;
            }
            if (this.playBtn) {
                this.playBtn.visible = true;
            }
        }
        if (this.subconlist.length > 0) {
            // jmt.Print.log(5);
            if (this.subreadindex < 1 || this.subreadindex < this.subconlist.length) {
                // jmt.Print.log(6);
                //子列表存在（answer，reply）
                if (this.showNum >= (this.contNum - 1)) {
                    //子列表下一条内容（subreadindex++）
                    // this.showSubConList();
                    this.subconinfo = this.subconlist[this.subreadindex];
                    this.initCont(this.subconinfo);
                    return;
                }
                else {
                    this.showNum++;
                    if (this.contArr[this.showNum]) {
                        //显示分隔的第showNum条内容 
                        this.showCont(this.contType, this.subconinfo, this.contArr, this.showNum);
                        return;
                    }
                }
            }
            else if (this.subreadindex == this.subconlist.length) {
                // jmt.Print.log(7);
                if (this.subchapterinfo) {
                    this.cangonext = false;
                    //提交选项回答后进入支线
                    // jmt.Console.log('subchapterinfo');
                    // 进入支线之前判断，主线的这组内容是否跑完，没有跑完，就依旧请求这组内容
                    // if(this.readindex < this.conlist.length){
                    //     this.nbindex = this.current_nbindex;
                    // }
                    jmt.Data.chapterinfo = this.subchapterinfo;
                    this.subchapterinfo = null;
                    this.loadContent();
                    return;
                }
            }
        }
        if (this.readindex < 1 || this.showNum >= (this.contNum - 1)) {
            // jmt.Print.log(8);
            //重置子列表
            this.subreadindex = 0;
            this.subconlist = [];
            // jmt.Console.log('==================');
            // jmt.Console.log(this.readindex);
            // jmt.Console.log(this.conlist.length);
            if (this.readindex >= this.conlist.length) {
                //结尾
                //判断是不是平台预览 //判断是否登录，未登录调取android登录
                !jmt.Config.PREVIEW && jmt.Config.ISLOGIN && this.syncStore(); //同步存档
                //判断是不是平台预览
                //预览到最后一个内容，就toast提示结束
                if (jmt.Config.PREVIEW) {
                    Bridge.instans.openToast('预览结束啦！');
                }
                //如果是分享的浏览器 链接，跳转app下载页面
                if (jmt.Config.ISSHAREBROWSER) {
                    // window.location.href = 'http://er.52jimu.com/app/download?pl=1';
                    DownloadAppCheckIsExsit.checkAppIsOpen();
                    return;
                }
                this.cangonext = false;
                //判断是否是平台付费章节,没有付费内容，保存showinfo，用于跳转，加调用安卓付费，安卓付费完成，直接调用加载章节内容
                if (!this.isbuy) {
                    //保存showinfo
                    this.isJump = true;
                    jmt.Data.showinfo = {};
                    for (var i = 0; i < this.conlist.length; i++) {
                        var item = this.conlist[i];
                        jmt.Data.showinfo.conid = item.conid;
                    }
                    jmt.Data.showinfo.skyid = this.skyid;
                    jmt.Data.showinfo.bgfile = this.bgFile;
                    jmt.Data.showinfo.bgmfile = this.bgmFile;
                    //调取android支付
                    Bridge.instans.openChapterPay(jmt.Data.chapterinfo);
                    this.readindex--;
                    this.cangonext = true;
                    return;
                }
                // jmt.Console.log('========结尾判断==========');
                // console.log(jmt.Data.chapterinfo);
                //如果章节内容的 nbindex 存在，也就是不等于0，说明还有章节内容，没有章节内容，就检查结局
                if (this.nbindex) {
                    // console.log('章节还有下一组内容，继续加载请求下一组');
                    // console.log(this.nbindex);
                    this.loadContent(jmt.Data.chapterinfo.chapterid);
                }
                else {
                    // console.log('没有下一组内容，获取下一章信息');
                    // console.log(this.nbindex);
                    //获取下一章节信息/结局判断
                    var apiUtil = new ApiUtil();
                    apiUtil.checkNextChapter(jmt.Data.chapterinfo, Handler.create(this, this.checkNextChapter), Handler.create(this, this.OnError));
                }
            }
            else if (this.conlist[this.readindex]) {
                // jmt.Print.log(10);
                this.coninfo = this.conlist[this.readindex];
                this.initCont(this.coninfo);
            }
            else {
            }
        }
        else {
            this.showNum++;
            if (this.contArr[this.showNum]) {
                // jmt.Print.log(11);
                //显示分隔的第showNum条内容
                this.showCont(this.contType, this.coninfo, this.contArr, this.showNum);
            }
        }
    };
    //安卓支付成功，回调这个方法，用来直接加载本章的章节内容。然后跳转内容
    ReadingView.prototype.platformPaySUcCallback = function () {
        this.loadContent(jmt.Data.chapterinfo.chapterid);
    };
    //平台重读本章
    ReadingView.prototype.replayChapter = function () {
        this.loadContent(jmt.Data.chapterinfo.chapterid);
    };
    /**
     * 初始化分割内容
     */
    ReadingView.prototype.initCont = function (coninfo) {
        // jmt.Print.log('重头开始 3333333333333333'); 
        // console.log(coninfo);
        // jmt.Print.log(12);
        // jmt.Print.log('===========coninfo===========');
        // jmt.Print.log(coninfo);
        // this.subconinfo = this.subconlist[this.subreadindex];
        var cont = coninfo.cont;
        this.showNum = 0;
        this.contType = coninfo.type;
        this.contArr = cont.split('{split}');
        this.contNum = this.contArr.length;
        // QQ玩一玩添加桌面弹窗
        if (WywUtil.onLimixiu()) {
            if (!jmt.GlobalData.PACKGE.all.isbuy) {
                if (!jmt.GlobalData.CHECK_QQ_ADD_DESK) {
                    if (+jmt.Data.chapterinfo.chapterid == 8804) {
                        var count = 100;
                        if (this.readindex == count && (this.contType == 1 || this.contType == 0)) {
                            this.stopAuto(); //停止快进
                            WywUtil.isDeskIconOpen();
                        }
                        else {
                            count += 10;
                        }
                    }
                }
            }
        }
        if (coninfo.bgfile && coninfo.bgfile != 'follow') {
            if (coninfo.bgfile == 'black' || coninfo.bgfile == 'white') {
                this.showType = 1;
            }
            else {
                this.showType = 0;
            }
        }
        if (coninfo.effect && coninfo.effect.over) {
            //存在过度特效，回调再显示内容
            // if (jmt.Config.DEBUG) {
            //     console.log('========过度特效=========');
            // }
            if (this.playState != 2) {
                // jmt.Print.log(13);
                //快进不显示过度
                this.cangonext = false;
                new jmt.effect.OverScene(coninfo.effect.over, Handler.create(this, this.showContent, [coninfo]));
            }
            else {
                // jmt.Print.log(14);
                this.showContent(coninfo);
            }
        }
        else {
            // jmt.Print.log(15);
            this.showContent(coninfo);
        }
        if (this.contArr[this.showNum]) {
            // this.showCont(this.contType,this.contArr[this.showNum],voice,roleinfo);   
            this.showCont(this.contType, coninfo, this.contArr, this.showNum);
        }
    };
    //检查下一章信息/结局判断
    ReadingView.prototype.checkNextChapter = function (res) {
        // console.log(1111111111111);
        if (!res) {
            return;
        }
        if (res.resulttype == 1 && res.chapterinfo) {
            //跳回主线
            // console.log('跳回主线');
            // console.log(res);
            this.bgBox.bgurl = '';
            // this.bgBox.bgurl=res.showinfo.conid;
            jmt.Data.chapterinfo = res.chapterinfo;
            //保存跳回主线，跳到进入之前的内容的conid
            if (res.showinfo) {
                jmt.Data.showinfo = res.showinfo;
                this.isJump = true;
            }
            if (res.type == jmt.Branch.TYPE_SERIES) {
                this.cangonext = true;
                // 播放辩驳成功音效
                jmt.util.Sound.playSound(jmt.Resource.SOUND_DEBATE_SUCCESS, jmt.Resource.RESTYPE_SOUND, 1, null, false);
                //追问辩驳成功，3秒后跳出支线
                var imgView = new ImageBoxView(jmt.Skin.READ_REFUTE_SUCCESS, 3000, Handler.create(this, this.loadContent), false);
                imgView.popup();
                this.questionProgress.removeSelf();
                this.questionProgress.destroy(true);
            }
            else {
                //立刻跳出支线
                this.loadContent();
            }
        }
        else if (res.chapterinfo) {
            //存在下一大章
            if (res.chapterinfo.rootchapterid == res.chapterinfo.chapterid) {
                //保存下一章的章节信息
                jmt.Data.nextChapterInfo = res.chapterinfo;
                //平台，为了兼容零下记忆
                //如果不是零下记忆，是平台，就不显示封面，显示平台的章节封面过渡
                if (jmt.Config.NOVELID != 10000) {
                    // this.cangonext = true;
                    // this.readindex--;
                    if (!res.autobuy) {
                        res.autobuy = 0;
                    }
                    //判断章节索引，第一章不弹章节封面过渡
                    if (res.chapterinfo.index != 1) {
                        Bridge.instans.openChapterTranstion(jmt.Data.novelinfo, res.chapterinfo, res.autobuy);
                        //这里设置的原因是 最后一个内容，打开了章节封面，但是不能关闭阅读界面，因为用户可以 按返回键回到阅读界面，这时候用户继续点击，再次进入章节过渡界面
                        this.cangonext = true;
                        //过渡界面，要return，安卓调用 继续阅读的btn的时候，给他方法
                        return;
                    }
                }
                this.initGame(res.chapterinfo);
            }
            else {
                this.loadChapter(res.chapterinfo);
            }
        }
        else {
            if (res.type == jmt.Branch.TYPE_SERIES) {
                //追问辩驳失败，重新开始
                var imgView = new ImageBoxView(jmt.Skin.READ_REFUTE_FAIL, 0, null, false);
                imgView.showBtn('重来', Handler.create(this, this.ReStartSeries));
                imgView.height = 500;
                imgView.popup();
            }
            else if (res.type == jmt.Branch.TYPE_DEATH) {
                //死亡
                // jmt.util.Sound.stopAllSound();
                var deathView = new DeathView();
                Laya.stage.addChild(deathView);
                this.removeSelf();
                this.destroy(true);
            }
            else {
                var apiUtil = new ApiUtil();
                apiUtil.Stat(jmt.Stat.PAGE_READING, jmt.Stat.ACT_READING_COMPLETE, jmt.Data.chapterinfo.chapterid); //完成阅读统计
                //结局
                // console.log(res);
                // jmt.util.Sound.stopAllSound();
                // console.log('结局');
                // console.log(res);
                // var endView = new GameOver(res.finishtitle, res.finishtype);
                // Laya.stage.addChild(endView);
                this.removeSelf();
                // this.destroy(true); 
                if (ReadingView._instans) {
                    ReadingView._instans.removeSelf();
                    ReadingView._instans = null;
                }
                //平台，为了兼容零下记忆
                //结局页面
                // jmt.Print.log('结局');
                // jmt.Print.log('结局'+ JSON.stringify(res));
                if (jmt.Config.NOVELID != 10000) {
                    if (res.finishtitle && res.finishtype) {
                        Bridge.instans.openEnding(jmt.Data.novelinfo, res.finishtitle, res.finishtype);
                    }
                    else {
                        Bridge.instans.openToast('结局异常');
                    }
                }
            }
        }
        jmt.util.Sound.stopAllSound();
        // jmt.util.Sound.stopMusic();\
        if (this.skyBox) {
            this.skyBox.clearSky();
            this.skyBox = null;
        }
    };
    // branchOut():void{
    //     this.loadingView = new LoadingView(jmt.Data.chapterinfo.chapterid,Handler.create(this,this.loadContent));
    //     Laya.stage.addChild(this.loadingView);
    // }
    ReadingView.prototype.ReStartSeries = function () {
        //TODO: 清除数据，从追问第一条开始
        jmt.Data.chapterinfo.show_conid = 0;
        jmt.Data.delReadLog(jmt.Data.chapterinfo.chapterid);
        this.bgBox.bgurl = '';
        jmt.util.Sound.stopAllSound();
        // jmt.util.Sound.stopMusic();
        var info = {};
        info.chapterinfo = jmt.Data.chapterinfo;
        info.readloglist = jmt.Data.getReadLoglist();
        GameMain.initGame(info);
        // this.loadingView = new LoadingView(jmt.Data.chapterinfo.chapterid,Handler.create(this,this.loadContent));
        // Laya.stage.addChild(this.loadingView);
    };
    // 辩驳进度条答案是否正确的逻辑
    ReadingView.prototype.keepQuestionProgressIsRight = function (isRight, index) {
        if (this.questionProgress) {
            this.questionProgress.changeRightImg(index, isRight.answertype, true);
        }
    };
    // 辩驳进度条红色圆圈的逻辑
    ReadingView.prototype.keepQuestionProgressRedCircle = function (index) {
        this.questionIndex = index;
        // console.log(this.questionProgress.circleImgArray);
        // console.log(this.questionIndex);
        this.questionProgress.circleImgArray[this.questionIndex].skin = 'skin/series/read_key_words_question_passing_icon.png';
        if (this.questionIndex > this.questionProgressCount) {
            // console.log(this.questionProgressCount);
            this.questionProgress.circleImgArray[this.questionProgressCount].skin = 'skin/series/read_key_words_question_not_pass_icon.png';
            this.questionProgressCount = this.questionIndex;
        }
    };
    ReadingView.prototype.onPostOptionCallback = function (res) {
        // console.log('进入选项回调');
        // console.log(res);
        if (res) {
            if (this.autoBtn) {
                Load.style(this.autoBtn, 'alpha', 0, 1);
            }
            if (this.playBtn) {
                Load.style(this.playBtn, 'alpha', 0, 1);
            }
            // 判断回答是否正确，分别显示追问进度顶部 不同的图片
            if (jmt.Data.chapterinfo && jmt.Data.chapterinfo.branchinfo && jmt.Data.chapterinfo.branchinfo.type == jmt.Branch.TYPE_SERIES) {
                this.keepQuestionProgressIsRight(res, this.questionProgressCount);
            }
            if (res.skulist && res.skulist.length > 0) {
                //显示属性值
                this.showSku(res.skulist);
                //平台，为了兼容零下记忆
                if (jmt.Config.NOVELID == 10000) {
                    if (this.playState != 2) {
                        var hastip = jmt.Data.hasTips(jmt.Data.TIPS_TYPE_SKU);
                        if (!hastip) {
                            //属性新手引导
                            if (this.playState == 1) {
                                this.stopAuto();
                            }
                            var tipsView = new TipsView(jmt.Data.TIPS_TYPE_SKU);
                            tipsView.show();
                            tipsView.zOrder = 910;
                        }
                    }
                }
            }
            if (res.replylist) {
                this.cangonext = true;
                this.subreadindex = 0;
                this.subconlist = [];
                if (res.chapterinfo) {
                    this.subchapterinfo = res.chapterinfo;
                }
                this.subconlist = res.replylist;
            }
            else if (res.chapterinfo) {
                // jmt.Console.log('进入支线章节: '+this.readindex);
                //进入支线章节
                this.bgBox.bgurl = '';
                jmt.util.Sound.stopAllSound();
                // jmt.util.Sound.stopMusic();
                jmt.Data.chapterinfo = res.chapterinfo;
                this.loadContent();
            }
            else {
                // jmt.Console.log('onPostOptionCallback readindex: '+this.readindex);
                this.cangonext = true;
                this.readindex++;
                //同步存档
                //判断是不是平台预览 //判断是否登录，未登录调取android登录
                !jmt.Config.PREVIEW && jmt.Config.ISLOGIN && this.syncStore(); //同步存档
                this.OnState();
            }
        }
        else {
            this.cangonext = true;
            this.readindex++;
            //同步存档
            //判断是不是平台预览 //判断是否登录，未登录调取android登录
            !jmt.Config.PREVIEW && jmt.Config.ISLOGIN && this.syncStore(); //同步存档
            this.OnState();
        }
    };
    /**
     * 渲染内容
     * @param coninfo
     */
    ReadingView.prototype.showContent = function (coninfo) {
        // jmt.Print.log('重头开始 4444444444444'); 
        jmt.Data.continfo = coninfo;
        jmt.Data.storeReading(jmt.Data.chapterinfo, coninfo);
        // console.log(jmt.Data.chapterinfo.issession);
        if (jmt.Data.chapterinfo.issession && this.readindex == 0) {
            //判断是不是平台预览 //判断是否登录，未登录调取android登录
            !jmt.Config.PREVIEW && jmt.Config.ISLOGIN && this.syncStore(); //同步存档
        }
        if (this.readindex == 0 || this.readindex % 10 == 0) {
            //10条记录同步一次存档
            //判断是不是平台预览 //判断是否登录，未登录调取android登录
            !jmt.Config.PREVIEW && jmt.Config.ISLOGIN && this.syncStore(); //同步存档
        }
        this.playSounds(coninfo.sounds);
        this.showBg(coninfo.bgfile, coninfo.skyid);
        this.showSky(coninfo.skyid);
        this.showEffect(coninfo.effect);
        this.playBgm(coninfo.bgmfile);
        // 辩驳追问显示 顶部进度条 和 圆点 显示逻辑
        if (jmt.Data.chapterinfo && jmt.Data.chapterinfo.branchinfo && jmt.Data.chapterinfo.branchinfo.type == jmt.Branch.TYPE_SERIES) {
            if (coninfo.optionlist) {
                // console.log(coninfo.index);
                // console.log(this.readindex);
                this.keepQuestionProgressRedCircle(this.readindex);
                // 辩驳进度条
                if (this.questionIndex > 0) {
                    var progressValue = (this.questionIndex / 1) / (this.questionProgress.conlist.length - 1);
                    Laya.Tween.to(this.questionProgress.progressBar, { value: progressValue }, 2000);
                    this.questionProgress.progressBar.value = progressValue;
                }
            }
        }
        if (coninfo.effect && coninfo.effect.over) {
            this.cangonext = true;
        }
        if (coninfo.bgfile == 'black' || coninfo.bgfile == 'white') {
            //黑屏白屏
            this.readindex++;
            if (this.roleBox) {
                this.roleBox.clearRole();
            }
        }
        else {
            var RegExp = /{clue:(\d+)}(.*?){\/clue}/;
            var obj = coninfo.cont.match(RegExp);
            //平台，为了兼容零下记忆
            if (jmt.Config.NOVELID == 10000) {
                if ((coninfo.type == jmt.Content.TYPE_ASIDE || coninfo.type == jmt.Content.TYPE_TALK) && !obj && !coninfo.optionlist && this.readindex > 20) {
                    if (this.playState != 2) {
                        var hastip = jmt.Data.hasTips(jmt.Data.TIPS_TYPE_LOG);
                        if (!hastip) {
                            //日志新手引导
                            if (this.playState == 1) {
                                this.stopAuto();
                            }
                            var tipsView = new TipsView(jmt.Data.TIPS_TYPE_LOG);
                            tipsView.show();
                            tipsView.zOrder = 910;
                        }
                    }
                }
            }
            if (coninfo.roledata) {
                if (this.bgFile != 'black' && this.bgFile != 'white') {
                    this.showCover(coninfo.roledata);
                    //有选项之后，对话框的位置变化，然后人物立绘一直没有切换，这时候，对话框位置没有变回来
                    if (SpeakManager._instance && SpeakManager._instance.changePosY) {
                        SpeakManager._instance.changePos(SpeakManager._instance.changePosY);
                    }
                }
                //判断是不是平台预览
                if (!jmt.Config.PREVIEW) {
                    //解锁角色
                    var apiUtil = new ApiUtil();
                    apiUtil.unlockRole(jmt.Data.chapterinfo, coninfo, Handler.create(this, this.unlockRoleComplete));
                }
            }
            else {
                //不存在，清除
                if (this.roleBox) {
                    this.roleBox.clearRole();
                }
                //平台，为了兼容零下记忆
                if (jmt.Config.NOVELID != 10000) {
                }
            }
            if (coninfo.optionlist) {
            }
            else if (coninfo.type == jmt.Content.TYPE_TALK) {
                //对话 
                this.readindex++;
            }
            else if (coninfo.type == jmt.Content.TYPE_ASIDE) {
                //旁白
                this.readindex++;
            }
            else if (coninfo.type == jmt.Content.TYPE_IMG) {
                //图片
                //平台，为了兼容零下记忆
                //  if(jmt.Config.NOVELID == 10000){
                //     this.readindex++;
                // var imgView = new ImageBoxView(jmt.Resource.addDomain(coninfo.cont), coninfo.type);
                // imgView.popup();
                if (!this.pictureSpeak) {
                    this.pictureSpeak = new PictureSpeak();
                    this.pictureSpeak.zOrder = 1;
                    this.addChild(this.pictureSpeak);
                }
                if (this.roleSpeak) {
                    this.roleSpeak.visible = false;
                }
                this.pictureSpeak.initTween('', coninfo.cont);
            }
            else if (coninfo.type == jmt.Content.TYPE_PROP) {
                //平台，为了兼容零下记忆
                //  if(jmt.Config.NOVELID == 10000){
                //道具图片
                this.readindex++;
                if (coninfo.cont) {
                    this.cangonext = false;
                    // var imgView = new ImageBoxView(jmt.Resource.addDomain(coninfo.cont), 0, Handler.create(this, this.onStopCallback));
                    // imgView.popup();
                    if (!this.pictureSpeak) {
                        this.pictureSpeak = new PictureSpeak();
                        this.addChild(this.pictureSpeak);
                    }
                    if (this.roleSpeak) {
                        this.roleSpeak.visible = false;
                    }
                    this.pictureSpeak.initTween('', coninfo.cont);
                }
            }
            else if (coninfo.type == jmt.Content.TYPE_ROLECHECK || coninfo.type == jmt.Content.TYPE_ROLEHIDE) {
                //角色检查点
                // this.cangonext=false;
                var apiUtil = new ApiUtil();
                apiUtil.openRole(coninfo.type, jmt.Data.chapterinfo, coninfo, Handler.create(this, this.checkRoleComplete));
            }
            else if (coninfo.type == jmt.Content.TYPE_CHECK) {
                //支线检查点
                this.cangonext = false;
                var apiUtil = new ApiUtil();
                apiUtil.checkBranch(coninfo.chapterid, coninfo.conid, Handler.create(this, this.onCheckBranch), Handler.create(this, this.OnError));
            }
            else if (coninfo.type == jmt.Content.TYPE_SKUCHECK) {
                //属性检查点
                this.cangonext = false;
                var apiUtil = new ApiUtil();
                apiUtil.checkSku(coninfo.chapterid, coninfo.conid, Handler.create(this, this.onCheckSku), Handler.create(this, this.OnError));
            }
            else if (coninfo.type == jmt.Content.TYPE_NAMECHECK) {
                //角色名检查点
                //  this.stopAuto();//停止自动播放
                //平台，为了兼容零下记忆
                if (jmt.Config.NOVELID == 10000) {
                    this.cangonext = false;
                    var renameView = new ReNameView(coninfo, Handler.create(this, this.onStopCallback));
                    renameView.popup();
                }
                else {
                    this.cangonext = true;
                    this.readindex++;
                    this.OnState();
                }
            }
            else if (coninfo.type == jmt.Content.TYPE_ANALY) {
                // this.stopAuto();//停止自动播放
                if (jmt.Config.NOVELID == 10000) {
                    //推理检查点
                    if (this.waitClick) {
                        //点击后再出现
                        // this.cangonext=false;
                        var apiUtil = new ApiUtil();
                        apiUtil.checkAnaly(coninfo.chapterid, coninfo.conid, Handler.create(this, this.onCheckAnaly));
                    }
                }
                else {
                    //除了零下记忆，没有等待点
                    this.cangonext = true;
                    this.readindex++;
                    this.OnState();
                }
            }
            else if (coninfo.type == jmt.Content.TYPE_WAIT) {
                //下线检查点
                // this.stopAuto();//停止自动播放
                // this.cangonext=false;
                // this.showBg('black');
                // if (this.roleBox) {
                //     this.roleBox.clearRole();
                // }
                // var apiUtil = new ApiUtil();
                // apiUtil.checkWait(coninfo.chapterid,coninfo.conid,Handler.create(this,this.onCheckWait));
                //平台，为了兼容零下记忆
                if (jmt.Config.NOVELID == 10000) {
                    if (this.playState != 2) {
                        var hastip = jmt.Data.hasTips(jmt.Data.TIPS_TYPE_SKU);
                        if (!hastip) {
                            //下线新手引导
                            if (this.playState == 1) {
                                this.stopAuto();
                            }
                            var tipsView = new TipsView(jmt.Data.TIPS_TYPE_SKU);
                            tipsView.show();
                            tipsView.zOrder = 910;
                        }
                    }
                }
                else {
                    //除了零下记忆，没有等待点
                    this.cangonext = true;
                    this.readindex++;
                    this.OnState();
                }
            }
            else if (coninfo.type == jmt.Content.TYPE_ANSWER) {
                //回答
                this.subreadindex++;
                if (this.subreadindex >= this.subconlist.length) {
                    //子列表显示完毕
                    this.readindex++;
                }
            }
            else if (coninfo.type == jmt.Content.TYPE_REPLY) {
                //回复
                this.subreadindex++;
                if (this.subreadindex >= this.subconlist.length) {
                    //子列表显示完毕
                    this.readindex++;
                }
            }
            else {
                this.readindex++;
            }
        }
    };
    /**
     * 解锁回调
     * @param res
     */
    ReadingView.prototype.unlockRoleComplete = function (res) {
        // console.log(res);
        if (res) {
            for (var i = 0; i < res.length; i++) {
                var roleid = res[i];
                jmt.Data.unlockrole[roleid] = roleid;
            }
            this.showReadPoint(ReadingView.MENU_COVER);
        }
    };
    /**
     * 角色检查点回调
     * @param res
     */
    ReadingView.prototype.checkRoleComplete = function (res) {
        this.cangonext = true;
        this.isDelay = false;
        this.readindex++;
        if (res) {
            //保存揭晓的角色
            jmt.Data.openrolelist = res;
            this.OnState();
        }
    };
    ReadingView.prototype.onStopCallback = function (res) {
        this.cangonext = true;
        this.readindex++;
        this.OnState();
    };
    /**
     * 显示属性
     * @param list
     */
    ReadingView.prototype.showSku = function (list) {
        // console.log('显示属性');
        var strArr = [];
        this.showReadPoint(ReadingView.MENU_SKU);
        for (var i = 0; i < list.length; i++) {
            var info = list[i];
            var str = '';
            //平台，为了兼容零下记忆
            //这里只有零下记忆的ui才会加入到这个str里面
            if (jmt.Config.NOVELID == 10000) {
                if (info.rolename) {
                    str += info.rolename;
                }
            }
            str += info.skuname;
            if (info.op == 1) {
                str += '-';
            }
            else {
                str += '+';
            }
            str += info.num;
            var tmp = {
                color: info.op == 1 ? '#dddddd' : '#EB6877',
                text: str,
                type: info.type,
                rolename: info.rolename || ''
            };
            //平台，为了兼容零下记忆
            if (jmt.Config.NOVELID != 10000) {
                tmp.color = '#ffffff';
            }
            strArr.push(tmp);
        }
        new jmt.effect.PopuSku(strArr);
    };
    /**
     * 属性检查回调
     * @param res
     */
    ReadingView.prototype.onCheckSku = function (res) {
        if (res && res.list) {
            this.showSku(res.list);
            this.showReadPoint(ReadingView.MENU_SKU);
        }
        this.cangonext = true;
        this.readindex++;
        this.OnState();
    };
    /**
     * 推理检查回调
     * @param res
     */
    ReadingView.prototype.onCheckAnaly = function (res) {
        var _this = this;
        // console.log(res);
        if (res && res.finish == 1) {
            // this.cangonext=true;
            this.waitClick = false;
            this.readindex++;
            this.OnState();
        }
        else {
            // 再进入显示Toats,再进入推理
            this.cangonext = false;
            var toastCallBack = function () {
                jmt.common.Toast.msg('需要进行推理，才能继续行动', _this, Handler.create(_this, _this.showClueView, [2]));
            };
            //如果是QQ轻游戏 和 微信IOS端，就先弹广告
            // 进入推理界面，首先先提升看视频广告，然后再弹toast提示
            if (WywUtil.onLimixiu() || WxUtil.onWxIOS()) {
                new game.intoBeforeLookVedio(jmt.QQresType.CLUE, toastCallBack);
            }
            else {
                toastCallBack();
            }
            //禁用顶部菜单点击事件
            this.closeOpenMenuClick(false);
        }
    };
    ReadingView.prototype.closeOpenMenuClick = function (boor) {
        this.menuList.mouseEnabled = boor;
    };
    ReadingView.prototype.showClueView = function (type) {
        if (type === void 0) { type = 1; }
        // 进入这个节目，如果还在快进，就停止快进
        this.cangonext = true;
        this.stopAuto();
        var clearHandler = null;
        var closeViewOpenMenuClick = null;
        if (type == 2) {
            clearHandler = Handler.create(this, this.clearClueNum);
            closeViewOpenMenuClick = Handler.create(this, this.closeOpenMenuClick, [true]);
        }
        var clueView = new ClueView(type, this.coninfo.chapterid, this.coninfo.conid, clearHandler, closeViewOpenMenuClick);
        clueView.popup();
        if (type == 2) {
            clueView.newGuide();
        }
    };
    // OnClue():void{
    //     // 进入这个节目，如果还在快进，就停止快进
    //     if (this.playState==2) {
    //         this.stopAuto();
    //     }
    //     var clueView: ClueView = new ClueView(1);
    //     clueView.width = Laya.stage.width;
    //     clueView.height = Laya.stage.height;
    //     clueView.popup();
    // }
    //推理成功，清除推理碎片回调
    ReadingView.prototype.clearClueNum = function () {
        //开启顶部点击事件
        this.closeOpenMenuClick(true);
        var totalnum = jmt.Data.novelinfo ? jmt.Data.novelinfo.clues : 0;
        var cluetitle = '(0/' + totalnum + ')';
        jmt.Data.storeinfo.clues = 0;
        this.showReadPoint(ReadingView.MENU_CLUE, cluetitle, true, 0);
    };
    ReadingView.prototype.waitComplete = function (res) {
        this.cangonext = true;
    };
    /**
     * 推理检查回调
     * @param res
     */
    ReadingView.prototype.onCheckWait = function (res) {
        if (res && res.finish == 1) {
            this.cangonext = true;
            this.readindex++;
            this.OnState();
        }
        else {
            // 进入等待页面
            this.cangonext = false;
            var waitView = new WaitView(res.remaintime, this.coninfo, Handler.create(this, this.waitComplete));
            this.addChild(waitView);
            waitView.zOrder = 1000;
        }
    };
    /**
     * 支线检查点回调
     * @param res
     */
    ReadingView.prototype.onCheckBranch = function (res) {
        if (res && res.chapterinfo) {
            //进入支线章节
            this.bgBox.bgurl = '';
            jmt.util.Sound.stopAllSound();
            // jmt.util.Sound.stopMusic();
            // 进入支线之前判断，主线的这组内容是否跑完，没有跑完，就依旧请求这组内容
            // if(this.readindex < this.conlist.length){
            //     this.nbindex = this.current_nbindex;
            // }
            jmt.Data.chapterinfo = res.chapterinfo;
            this.loadContent();
        }
        else {
            this.cangonext = true;
            this.readindex++;
        }
    };
    /**
     * 显示特效
     * @param effect
     */
    ReadingView.prototype.showEffect = function (effect) {
        if (effect && effect.addon) {
            for (var i = 0; i < effect.addon.length; i++) {
                var ef = effect.addon[i];
                if (ef == jmt.Content.EFFECT_ADDON_SHAKE) {
                    new jmt.effect.ShakeScene(this);
                }
                else if (ef == jmt.Content.EFFECT_ADDON_FLASHBLACK) {
                    new jmt.effect.FlashScene();
                }
                else if (ef == jmt.Content.EFFECT_ADDON_FLASHWHITE) {
                    new jmt.effect.FlashScene('#ffffff');
                }
                else if (ef == jmt.Content.EFFECT_ADDON_EYE) {
                    //this.cangonext=false;
                    this.isEffecting = true;
                    var spacetime = 800;
                    if (this.playState == 2) {
                        spacetime = 80;
                    }
                    new jmt.effect.OpenEyes(spacetime, Handler.create(this, this.eyeComplete, [ef]));
                }
            }
        }
    };
    ReadingView.prototype.eyeComplete = function (ef) {
        //this.cangonext=true;
        this.isEffecting = false;
        // if(ef == jmt.Content.EFFECT_ADDON_EYE && jmt.Data.continfo.voices){
        //     this.cangonext=false;
        // }
        if (this.playState != 0) {
            if (this.isPlaying || this.isVoicing) {
                return;
            }
            this.OnState();
        }
    };
    ReadingView.prototype.showSky = function (skyid) {
        if (skyid) {
            if (skyid != -1 && skyid != this.skyid) {
                this.skyid = skyid;
                if (this.skyBox) {
                    this.skyBox.clearSky();
                    this.skyBox = null;
                }
                if (!this.skyBox) {
                    this.skyBox = new jmt.common.PartBox(this);
                }
                this.skyBox.loadPart(this.skyid);
            }
        }
        else if (skyid == 0) {
            this.skyid = 0;
            if (this.skyBox) {
                this.skyBox.clearSky();
                this.skyBox = null;
            }
        }
    };
    /**
     * 显示背景
     * @param bgfile
     */
    ReadingView.prototype.showBg = function (bgfile, skyid) {
        if (bgfile) {
            if (bgfile == 'clear' || (bgfile == 'follow' && this.bgFile == '')) {
                //显示天气背景
                if (skyid == 1) {
                    this.bgFile = jmt.Skin.READING_SUNSHINE;
                }
                else if (skyid == 2) {
                    this.bgFile = jmt.Skin.READING_DARK;
                }
                else if (skyid == 3) {
                    this.bgFile = jmt.Skin.READING_SNOW;
                }
                else if (skyid == 4) {
                    this.bgFile = jmt.Skin.READING_RAIN;
                }
                else {
                    this.bgFile = jmt.Skin.READING_DEFBG;
                }
                var bgurl = this.bgFile;
                if (!this.bgBox) {
                    this.bgBox = new game.BackgroundBox(this);
                }
                this.bgBox.bgurl = bgurl;
            }
            else if (bgfile != 'follow' && bgfile != this.bgFile) {
                this.bgFile = bgfile;
                var bgurl = this.bgFile;
                if (bgurl != 'black' && bgurl != 'white') {
                    bgurl = jmt.Config.RES_DOMAIN + bgurl;
                }
                // console.log(bgurl);
                if (!this.bgBox) {
                    this.bgBox = new game.BackgroundBox(this);
                }
                this.bgBox.bgurl = bgurl;
            }
        }
    };
    /**
     * 显示立绘
     * @param roledata
     */
    ReadingView.prototype.showCover = function (roledata) {
        var rolelist = [];
        if (roledata.to) {
            rolelist = roledata.to;
        }
        else if (roledata.say) {
            //主角不显示立绘
            if (roledata.say.type != 1) {
                // roledata.say.issay=1;
                if (roledata.say.spine && roledata.say.emoji == 'emoji_0') {
                    roledata.say.emoji = 'emoji_0_1'; //替换为说话表情
                }
                rolelist.push(roledata.say);
            }
        }
        if (rolelist.length > 0) {
            var newrolelist = [];
            for (var i = 0; i < rolelist.length; i++) {
                if (rolelist[i].spine) {
                    rolelist[i]['spine'] = jmt.Config.RES_DOMAIN + rolelist[i].spine + '.sk';
                    // console.log(spine);
                    //rolelist[i]['spine'] = spine.replace('_spine','');
                    newrolelist.push(rolelist[i]);
                }
                else if (rolelist[i].cover) {
                    rolelist[i]['cover'] = jmt.Config.RES_DOMAIN + rolelist[i].cover;
                    newrolelist.push(rolelist[i]);
                }
            }
            if (!this.roleBox) {
                this.roleBox = new MultiRoleBox(this);
                this.roleBox.zOrder = 0;
            }
            if (this.playState == 2) {
                this.roleBox.movespeed = 50;
                this.roleBox.delspeed = 10;
                this.roleBox.showspeed = 50;
            }
            else {
                this.roleBox.movespeed = 500;
                this.roleBox.delspeed = 200;
                this.roleBox.showspeed = 400;
            }
            this.roleBox.addRoleList(newrolelist);
        }
        else {
            if (this.roleBox) {
                this.roleBox.clearRole();
            }
        }
    };
    /**
     * 播放背景音乐
     * @param bgmfile
     */
    ReadingView.prototype.playBgm = function (bgmfile) {
        // jmt.Print.log(bgmfile);
        if (bgmfile) {
            if (bgmfile == 'clear') {
                jmt.util.Sound.stopMusic();
            }
            else if (bgmfile != 'follow') {
                this.bgmFile = bgmfile;
                var bgmurl = jmt.Config.RES_DOMAIN + this.bgmFile;
                // jmt.util.Sound.playMusic(bgmurl,jmt.Resource.RESTYPE_BGM,0);
                jmt.util.Sound.changeMusic(bgmurl, jmt.Resource.RESTYPE_BGM, 0);
            }
        }
    };
    /**
     * 播放配音
     * @param voice
     * @param complete
     */
    ReadingView.prototype.playVoice = function (voice, complete) {
        if (voice) {
            // this.sounds.push(voice);
            var voiceurl = jmt.Config.RES_DOMAIN + voice;
            jmt.util.Sound.playSound(voiceurl, jmt.Resource.RESTYPE_VOICE, 1, complete);
        }
    };
    /**
     * 播放音效
     * @param sounds
     */
    ReadingView.prototype.playSounds = function (sounds) {
        jmt.util.Sound.stopAllSound();
        // if (!this.autoFast) {
        // jmt.util.Sound.stopAllSound();
        if (sounds) {
            this.sounds = sounds;
            // var volume = jmt.Data.getPlayVoice(jmt.Resource.RESTYPE_SOUND);
            // console.log(sounds);
            for (var index = 0; index < sounds.length; index++) {
                var sound = sounds[index];
                var soundurl = jmt.Config.RES_DOMAIN + sound;
                jmt.util.Sound.playSound(soundurl, jmt.Resource.RESTYPE_SOUND);
            }
        }
        // }
    };
    /**
     * 显示文字内容
     * @param type
     * @param cont
     * @param voice
     * @param role
     */
    ReadingView.prototype.showCont = function (type, coninfo, contArr, showNum) {
        // jmt.Print.log(17);
        // console.log('显示内容');
        // console.log(coninfo);
        // jmt.Print.log('重头开始 5555555555555'); 
        if (type == jmt.Content.TYPE_NAMECHECK || type == jmt.Content.TYPE_ROLECHECK || type == jmt.Content.TYPE_ROLEHIDE || type == jmt.Content.TYPE_SKUCHECK || type == jmt.Content.TYPE_CHECK || type == jmt.Content.TYPE_PROP || type == jmt.Content.TYPE_IMG) {
            // jmt.Print.log(18);
            return;
        }
        // console.log('isPlaying:'+this.isPlaying);
        this.isPlaying = true;
        var cont = contArr[showNum] ? contArr[showNum] : '';
        // 如果文字内容中出现了“炽念”,就替换成玩家输入的名字
        var voice = null;
        if (coninfo.voices && coninfo.voices[showNum]) {
            voice = coninfo.voices[showNum];
        }
        var voices = null;
        if (coninfo.voices) {
            voices = true;
        }
        var role = null;
        if (coninfo.roledata && coninfo.roledata.say) {
            role = coninfo.roledata.say;
        }
        var rolename = null;
        var roleid = role ? role.roleid : null;
        var isleadrole = role && role.type == 1 ? 1 : 0;
        if (role) {
            // if (jmt.Data.renamerole && jmt.Data.renamerole[roleid]) {
            //     rolename = jmt.Data.renamerole&&jmt.Data.renamerole[roleid]?jmt.Data.renamerole[roleid]:role.name;
            // }
            if (jmt.Data.openrolelist[roleid]) {
                rolename = jmt.Data.openrolelist[roleid]['rolename'] ? jmt.Data.openrolelist[roleid]['rolename'] : role.name;
            }
            else {
                rolename = role.name;
            }
        }
        //判断是不是平台预览
        if (!jmt.Config.PREVIEW) {
            if (jmt.Data.renamerole && jmt.Data.renamerole[jmt.Data.novelinfo.leadrole.roleid]) {
                var myname = jmt.Data.renamerole[jmt.Data.novelinfo.leadrole.roleid];
                var pattern = new RegExp(jmt.Data.novelinfo.leadrole.rolename, 'g');
                cont = cont.replace(pattern, myname); //替换主角名字
            }
        }
        var hasvoice = 0;
        var soundurl = null;
        if (voice) {
            hasvoice = 1;
            this.isVoicing = true;
            this.playVoice(voice, Handler.create(this, this.voiceComplete, [{ type: type, roleid: roleid, voice: voice, coninfo: coninfo }]));
        }
        else {
            if (type == jmt.Content.TYPE_ASIDE) {
                soundurl = jmt.Resource.SOUND_CONT_TALK;
                jmt.util.Sound.playSound(soundurl, jmt.Resource.RESTYPE_SOUND, 1, null, false);
            }
            else if (type == jmt.Content.TYPE_TALK || type == jmt.Content.TYPE_ANSWER || type == jmt.Content.TYPE_REPLY) {
                soundurl = jmt.Resource.SOUND_CONT_TALK;
                jmt.util.Sound.playSound(soundurl, jmt.Resource.RESTYPE_SOUND, 1, null, false);
            }
        }
        //平台，为了兼容零下记忆
        if (jmt.Config.NOVELID == 10000) {
            if (this.showType == 0) {
                //正常旁白对话
                this.topMenu.visible = true;
                this.showCollectClue(cont, coninfo);
                if (this.midChatbox) {
                    this.midChatbox.visible = false;
                }
                if (!this.chatbox) {
                    this.chatbox = new game.ChatBox(this, jmt.Skin.CHAT_BG, Handler.create(this, this.OnState, null, false));
                    this.chatbox.zOrder = 99;
                }
                else {
                    this.chatbox.visible = true;
                }
                this.chatbox.show(type, cont, rolename, isleadrole, Handler.create(this, this.showComplete, [{ type: type, roleid: roleid, sound: soundurl, showNum: showNum, voice: voice, coninfo: coninfo }]), voices);
            }
            else if (this.showType == 1) {
                //黑白屏中间显示   
                this.topMenu.visible = false;
                if (this.chatbox) {
                    this.chatbox.visible = false;
                }
                if (!this.midChatbox) {
                    this.midChatbox = new game.MidChatBox(this);
                    this.midChatbox.zOrder = 99;
                }
                else {
                    this.midChatbox.visible = true;
                }
                this.midChatbox.show(type, cont, null, Handler.create(this, this.showComplete, [{ type: type, roleid: roleid, sound: soundurl, voice: voice, showNum: showNum, coninfo: coninfo }]), this.bgFile);
            }
        }
        else {
            //参数
            var name_1;
            var info = void 0;
            var imgskin = void 0;
            var newRoleId = void 0; //用于和上个内容的roleid做对比
            var leadingCoverSkin = void 0;
            info = cont;
            imgskin = coninfo.info;
            //对话类型
            if (coninfo.roledata && coninfo.roledata.say && coninfo.roledata.say.type == 1) {
                this.speakType = SpeakType.leading; //主角
                name_1 = coninfo.roledata.say.name;
                leadingCoverSkin = coninfo.roledata.say.cover;
            }
            else if (coninfo.roledata && coninfo.roledata.say && coninfo.roledata.say.type == 0) {
                this.speakType = SpeakType.supportingRole; //配角
                name_1 = coninfo.roledata.say.name;
            }
            else if (coninfo.roledata && coninfo.roledata.say && coninfo.roledata.say.type == 2) {
                //路人，要判断路人甲路人乙。左右切换，还要判断路人id，id不一样才切换
                newRoleId = coninfo.roleid;
                // console.log('new'+newRoleId);
                // console.log('old'+this.oldRoadId);
                // jmt.Print.log('重头开始 66666666666666'); 
                //先判断路人类型，然后不同路人类型再判断路人id
                if (this.currentRoadAB == SpeakType.roadA) {
                    //新的id和上一个内容id不相同，就切换类型
                    if (newRoleId != this.oldRoadId) {
                        this.currentRoadAB = SpeakType.roadB;
                        this.speakType = this.currentRoadAB; //路人A
                    }
                    else {
                        this.currentRoadAB = SpeakType.roadA;
                        this.speakType = this.currentRoadAB;
                    }
                    this.oldRoadId = newRoleId;
                }
                else if (this.currentRoadAB == SpeakType.roadB) {
                    //新的id和上一个内容id不相同，就切换类型
                    if (newRoleId != this.oldRoadId) {
                        this.currentRoadAB = SpeakType.roadA;
                        this.speakType = this.currentRoadAB; //路人B
                    }
                    else {
                        this.currentRoadAB = SpeakType.roadB;
                        this.speakType = this.currentRoadAB;
                    }
                    this.oldRoadId = newRoleId;
                }
                name_1 = coninfo.roledata.say.name;
            }
            else if (coninfo.type == 0) {
                this.speakType = SpeakType.aside; //盘白
            }
            else if (coninfo.type == 2 || coninfo.type == 10) {
                this.speakType = SpeakType.picture; //道具图片
            }
            // console.log('speakType')
            // console.log(this.speakType)
            // console.log(SpeakManager.instance.speakDic);
            // console.log(this.speakType);
            var roleSpeak = this.speakManager.getSpeak(this.speakType);
            // console.log('aaaaaaaaaa');
            // console.log(roleSpeak);
            if (roleSpeak != 'same') {
                this.roleSpeak = roleSpeak;
            }
            //如果是主角 加载刷新主角cover
            if (this.speakType == SpeakType.leading) {
                // console.log('刷新主角');
                // console.log(roleSpeak);
                this.roleSpeak.refreshHead(leadingCoverSkin);
            }
            // jmt.Print.log('重头开始 777777777777777'); 
            if (roleSpeak == 'same') {
                // jmt.Print.log('重头开始 777777 11111'); 
                // jmt.Print.log('info ');
                // jmt.Print.log('info + '+info);
                // //和上个对话框类型相同
                // console.log('相同');
                //如果对话类型是旁白，上个对话类型也是旁白，要切换角色名称
                if (this.speakType == SpeakType.supportingRole) {
                    // console.log(roleSpeak);
                    // console.log(this.speakType);
                    // console.log(this.roleSpeak);
                    this.roleSpeak.changeName(name_1);
                }
                // console.log(this.roleSpeak);
                this.roleSpeak.printPlay(cont, Handler.create(this, this.showComplete, [{ type: type, roleid: roleid, sound: soundurl, voice: voice, showNum: showNum, coninfo: coninfo }], false));
            }
            else {
                // jmt.Print.log('重头开始 777777 2222'); 
                //和上个对话框类型不同
                // console.log('不同');
                this.addChild(this.roleSpeak);
                // console.log(this.speakType);
                // console.log(this.roleSpeak);
                this.roleSpeak.initTween(rolename, cont, imgskin, Handler.create(this, this.showComplete, [{ type: type, roleid: roleid, sound: soundurl, voice: voice, showNum: showNum, coninfo: coninfo }], false));
            }
        }
    };
    //平台图片显示完成，回调
    /**
     * 配音完成
     * @param args
     */
    ReadingView.prototype.voiceComplete = function (args) {
        // jmt.Print.log(args);
        // jmt.Print.log('=========配音完成========');
        this.isVoicing = false;
        if (args.roleid) {
            if (this.roleBox) {
                this.roleBox.stopSaying(args.roleid);
            }
        }
        if (this.playState == 1) {
            // jmt.Print.log(19);
            this.autoComplete(args);
        }
    };
    /**
     * 打字结束
     * @param args
     */
    ReadingView.prototype.showComplete = function (args) {
        var _this = this;
        // console.log('打字结束');
        // jmt.Print.log('重头开始 88888888888'); 
        if (args && args.sound) {
            // SoundManager.stopSound(args.sound);
            jmt.util.Sound.stopSound(args.sound);
        }
        if (args.coninfo) {
            if (args.type == jmt.Content.TYPE_ANALY) {
                this.waitClick = true; //等待点击
            }
        }
        // 打字完成后显示内容（只有分隔第一个内容才出现这情况）
        if (args.coninfo && args.showNum == 0) {
            //显示特写
            if (args.coninfo.roledata && args.coninfo.roledata.clo) {
                var coverArr = [];
                for (var i = 0; i < args.coninfo.roledata.clo.length; i++) {
                    var role = args.coninfo.roledata.clo[i];
                    coverArr.push(role.cloimg);
                }
                var closeView = new CloseUpView(coverArr, 3500);
                closeView.popup();
            }
            // console.log(args);
            // console.log(11111111111111);
            if (args.coninfo.optionlist) {
                // console.log('选项选项选项选项选项选项选项选项选项');
                // console.log(args);
                // console.log(args.coninfo)
                // console.log(args.coninfo.optionlist)
                //选项
                // this.cangonext=false;
                if (this.autoBtn) {
                    this.autoBtn.visible = false;
                }
                if (this.playBtn) {
                    this.playBtn.visible = false;
                }
                //进入选项前，先弹出视频广告，看完广告或者关闭之后才弹出选项
                var intoOptionView = function () {
                    var opView = new OptionView(_this, args.coninfo, Handler.create(_this, _this.onPostOptionCallback));
                    opView.zOrder = 900;
                    //平台，为了兼容零下记忆
                    if (jmt.Config.NOVELID != 10000) {
                        if (_this.speakType != SpeakType.leading) {
                            opView.mainBox.bottom = 200;
                            //如果不是主角说话，并且有选项，对话框的位置在选项的上面
                            Laya.Tween.to(_this.roleSpeak, { y: Laya.stage.height - (opView.mainBox.bottom + opView.mainBox.height) - _this.roleSpeak.height - 80 }, 1000);
                        }
                        else {
                            opView.mainBox.centerY = 0;
                        }
                    }
                };
                //如果是QQ轻游戏 和 微信IOS端，就先弹广告
                // 进入推理界面，首先先提升看视频广告，然后再弹toast提示
                if (WywUtil.onLimixiu() || WxUtil.onWxIOS()) {
                    // 其他选项
                    if (args.coninfo.optype != jmt.Content.OPTYPE_SERIES) {
                        new game.intoBeforeLookVedio(jmt.QQresType.OPTION, intoOptionView);
                    }
                    else {
                        //如果是追问，只在第一条追问弹
                        if (!this.isFirstOption && this.readindex == 0) {
                            new game.intoBeforeLookVedio(jmt.QQresType.QUESTION, intoOptionView);
                            this.isFirstOption = 1;
                        }
                        else {
                            intoOptionView();
                        }
                    }
                }
                else {
                    intoOptionView();
                }
                //平台，为了兼容零下记忆
                if (jmt.Config.NOVELID == 10000) {
                    if (this.playState != 2 && args.coninfo.bgfile != 'black' && args.coninfo.bgfile != 'white' && !args.coninfo.optionlist) {
                        var hastip = jmt.Data.hasTips(jmt.Data.TIPS_TYPE_STORE);
                        if (!hastip) {
                            //保存进度新手引导
                            if (this.playState == 1) {
                                this.stopAuto();
                            }
                            var tipsView = new TipsView(jmt.Data.TIPS_TYPE_STORE);
                            tipsView.show();
                            tipsView.zOrder = 910;
                        }
                    }
                }
            }
        }
        this.isPlaying = false;
        if (this.playState == 2) {
            //快进
            this.autoComplete(args);
        }
        else {
            this.isDelay = true;
            //启动延时点击下一步，避免错点
            Laya.timer.once(500, this, this.showDelay, [args]);
            if (this.playState == 1) {
                // jmt.Print.log('showComplete');
                Laya.timer.once(2000, this, this.autoComplete, [args]);
            }
        }
    };
    ReadingView.prototype.autoComplete = function (args) {
        // jmt.Print.log(20);
        if (this.playState == 0) {
            // jmt.Print.log(21);
            return;
        }
        else if (this.playState == 1) {
            if (this.coninfo && !this.coninfo.voices) {
                // console.log(111111111)
                this.isVoicing = false;
            }
            if (this.isPlaying || this.isVoicing) {
                // console.log(22);
                // console.log(this.isPlaying+' isPlaying');
                // console.log(this.isVoicing+' isVoicing');
                // console.log(this.playState+' playStateg');
                return;
            }
        }
        if (args) {
            if (args.coninfo && args.coninfo.optionlist) {
                // jmt.Print.log(23);
                this.stopAuto();
            }
            else {
                if (args.type == jmt.Content.TYPE_NAMECHECK || args.type == jmt.Content.TYPE_ANALY || args.type == jmt.Content.TYPE_WAIT) {
                    // jmt.Print.log(24);
                    // if (jmt.Config.DEBUG) {
                    //     console.log('============停止播放==========');
                    //     console.log(args.type);
                    // }
                    this.stopAuto();
                }
                else {
                    // jmt.Print.log(26);  
                    // this.cangonext = true;                  
                    this.OnState();
                }
            }
        }
    };
    /**
     * 打印延时结束
     * @param args
     */
    ReadingView.prototype.showDelay = function (args) {
        // if (jmt.Config.DEBUG) {
        //     console.log(args);
        // }
        this.isDelay = false;
        if (args && args.roleid) {
            if (!args.voice) {
                if (this.roleBox) {
                    //停止嘴巴
                    this.roleBox.stopSaying(args.roleid);
                }
            }
        }
    };
    /**
     * 显示收集按钮
     * @param cont
     * @param coninfo
     */
    ReadingView.prototype.showCollectClue = function (cont, coninfo) {
        var RegExp = /{clue:(\d+)}(.*?){\/clue}/;
        var obj = cont.match(RegExp);
        if (obj && obj[1]) {
            var clueid = parseInt(obj[1]);
            if (clueid > 0) {
                //收集成功才能继续
                this.cangonext = false;
                jmt.util.Sound.playSound(jmt.Resource.SOUND_CLUE_FIND, jmt.Resource.RESTYPE_SOUND);
                var collectView = new CollectClueView(clueid, coninfo, Handler.create(this, this.collectComplete));
                collectView.show();
                collectView.zOrder = 901;
            }
        }
        // if (this.recordBtn) {
        //     this.recordBtn.visible=false;
        // }
    };
    ReadingView.prototype.collectComplete = function (res) {
        this.cangonext = true;
        // this.recordBtn.visible=false;
        // var recordPie = new Laya.Image(jmt.Skin.PIECES_BOX);
        // this.addChild(recordPie); 
        // recordPie.right = 90;
        // recordPie.bottom = 230;
        // var x = 290;
        // var y = 90;
        if (!jmt.Data.storeinfo) {
            jmt.Data.storeinfo = {
                clues: 0
            };
        }
        else {
            jmt.Data.storeinfo.clues = jmt.Data.storeinfo.clues + 1;
        }
        if (res) {
            jmt.Data.storeinfo.clues = res.clues;
        }
        var cluenum = jmt.Data.storeinfo.clues;
        var totalnum = jmt.Data.novelinfo ? jmt.Data.novelinfo.clues : 0;
        var cluetitle = '(' + cluenum + '/' + totalnum + ')';
        this.showReadPoint(ReadingView.MENU_CLUE, cluetitle, true);
        if (this.playState == 2 || this.playState == 1) {
            this.OnState();
        }
        //Laya.Tween.to(recordPie,{x:x,y:y,alpha:0},2000,Laya.Ease.strongOut,Handler.create(this,this.moveComplete,[{target:recordPie}]));
    };
    ReadingView.prototype.moveComplete = function (args) {
        if (args && args.target) {
            args.target.removeSelf();
        }
    };
    return ReadingView;
}(ui.home.ReadingUI));
ReadingView.MENU_SYS = 0;
ReadingView.MENU_SKU = 1;
ReadingView.MENU_COVER = 2;
ReadingView.MENU_CLUE = 3;
//# sourceMappingURL=ReadingView.js.map