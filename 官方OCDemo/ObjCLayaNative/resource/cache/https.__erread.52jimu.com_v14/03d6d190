//缩放时间，单位为
// var scaleTime:number = 100;
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var component;
(function (component) {
    // import Button   = laya.editorUI.Button;
    // import Image    = laya.editorUI.Image;
    // import Box      = laya.editorUI.Box;
    var Button = laya.ui.Button;
    var Box = laya.ui.Box;
    var Sprite = Laya.Sprite;
    var Handler = Laya.Handler;
    //继承editorUI.Button
    var ScaleButton = /** @class */ (function (_super) {
        __extends(ScaleButton, _super);
        function ScaleButton(skin, label) {
            if (skin === void 0) { skin = null; }
            if (label === void 0) { label = ""; }
            var _this = _super.call(this, skin, label) || this;
            _this.scaleTime = 100;
            /* 设置按钮为单态按钮
            ** 取值：
            ** 1：单态。图片不做切割，按钮的皮肤状态只有一种。
            ** 2：两态。图片将以竖直方向被等比切割为2部分，从上向下，依次为弹起状态皮肤、按下和经过及选中状态皮肤。
            ** 3：三态。图片将以竖直方向被等比切割为2部分，从上向下，依次为弹起状态皮肤、经过状态皮肤、按下和选中状态皮肤
            */
            _this.stateNum = 1;
            //添加鼠标按下事件侦听。按时时缩小按钮。
            _this.on(Laya.Event.MOUSE_DOWN, _this, _this.scaleSmall);
            //添加鼠标抬起事件侦听。抬起时还原按钮。
            _this.on(Laya.Event.MOUSE_UP, _this, _this.scaleBig);
            //添加鼠标离开事件侦听。离开时还原按钮。
            _this.on(Laya.Event.MOUSE_OUT, _this, _this.scaleBig);
            return _this;
        }
        ScaleButton.prototype.scaleSmall = function () {
            //缩小至0.8的缓动效果
            Laya.Tween.to(this, { scaleX: 0.8, scaleY: 0.8 }, this.scaleTime);
        };
        ScaleButton.prototype.scaleBig = function () {
            //变大还原的缓动效果
            Laya.Tween.to(this, { scaleX: 1, scaleY: 1 }, this.scaleTime);
        };
        return ScaleButton;
    }(Button));
    component.ScaleButton = ScaleButton;
    var WaveLoading = /** @class */ (function (_super) {
        __extends(WaveLoading, _super);
        function WaveLoading(progress, waveSkin, maskSkin, coverSkin, bgSkin) {
            var _this = _super.call(this) || this;
            _this.waveHeight = 0;
            _this.width = 200;
            _this.height = 200;
            _this.waveSpeed = 3000;
            _this.waveSpeed2 = 2000;
            _this.progress = 0.5;
            if (progress) {
                _this.progress = progress;
            }
            if (waveSkin) {
                _this.waveSkin = waveSkin;
            }
            if (maskSkin) {
                _this.maskSkin = maskSkin;
            }
            if (coverSkin) {
                _this.coverSkin = coverSkin;
            }
            if (bgSkin) {
                _this.bgSkin = bgSkin;
            }
            var waveHeight = _this.height - (_this.height * _this.progress);
            if (waveHeight > (_this.height - 15)) {
                waveHeight = _this.height - 15; //至少显示一点点
            }
            if (_this.bgSkin) {
                _this.waveBg = new Sprite();
                var bgRes = Laya.loader.getRes(_this.bgSkin);
                var bgheight = bgRes.height * (_this.width / bgRes.width);
                _this.waveBg.graphics.drawTexture(bgRes, 0, 0, _this.width, bgheight);
                _this.addChild(_this.waveBg);
            }
            _this.waveSp = new Sprite();
            _this.waveSpap = new Sprite();
            _this.waveSp.graphics.drawTexture(Laya.loader.getRes(_this.waveSkin), -23, 0);
            _this.waveSpap.graphics.drawTexture(Laya.loader.getRes(_this.waveSkin), -53, 0, null, null, null, 0.5);
            _this.waveSp.y = _this.height;
            _this.waveSpap.y = _this.height;
            _this.addChild(_this.waveSp);
            _this.addChild(_this.waveSpap);
            if (_this.coverSkin) {
                _this.waveCover = new Sprite();
                var coverRes = Laya.loader.getRes(_this.coverSkin);
                var coverheight = coverRes.height * (_this.width / coverRes.width);
                _this.waveCover.graphics.drawTexture(coverRes, 0, 0, _this.width, coverheight);
                _this.addChild(_this.waveCover);
            }
            if (_this.maskSkin) {
                _this.waveMask = new Sprite();
                var maskRes = Laya.loader.getRes(_this.maskSkin);
                var maskheight = maskRes.height * (_this.width / maskRes.width);
                _this.waveMask.graphics.drawTexture(maskRes, 0, 0, _this.width, maskheight);
                _this.mask = _this.waveMask;
            }
            _this.progerssText = new Sprite();
            _this.progerssText.width = _this.width;
            var text = (progress * 100) + '%';
            _this.progerssText.graphics.fillText(text, _this.width / 2, _this.height / 2 - 20, '30px Arial', '#ffffff', 'center');
            _this.addChild(_this.progerssText);
            Laya.Tween.to(_this.waveSp, { y: waveHeight }, _this.waveSpeed, null, null, null, null, true);
            Laya.Tween.to(_this.waveSpap, { y: waveHeight }, _this.waveSpeed, null, null, null, null, true);
            Laya.Tween.to(_this.waveSp, { x: -224 }, _this.waveSpeed, null, Handler.create(_this, _this.moveComplete));
            Laya.Tween.to(_this.waveSpap, { x: -254 }, _this.waveSpeed2, null, Handler.create(_this, _this.moveCompleteAp));
            return _this;
        }
        WaveLoading.prototype.moveComplete = function () {
            this.waveSp.x = -23;
            Laya.Tween.to(this.waveSp, { x: -224 }, this.waveSpeed, null, Handler.create(this, this.moveComplete));
        };
        WaveLoading.prototype.moveCompleteAp = function () {
            this.waveSpap.x = -53;
            Laya.Tween.to(this.waveSpap, { x: -254 }, this.waveSpeed2, null, Handler.create(this, this.moveCompleteAp));
        };
        return WaveLoading;
    }(Box));
    component.WaveLoading = WaveLoading;
})(component || (component = {}));
//# sourceMappingURL=SoulUI.js.map