var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var ChapterUnlock = /** @class */ (function (_super) {
    __extends(ChapterUnlock, _super);
    function ChapterUnlock(chapterinfo, complete) {
        var _this = _super.call(this) || this;
        _this.onlyPackageBgBox = new Laya.Box(); //单章节付费套餐 大背景框
        _this.onlyPackageList = new Laya.List(); //单章节套餐列表
        _this.onlyPackageListBox = new Laya.Box();
        _this.onlyPackageBuyBtn = new Laya.Button(); //单章节套餐付费按钮
        _this.bgImg.skin = jmt.Skin.CHAPTER_PAYBG;
        //设置过渡效果
        _this.swiper_panel.visible = false;
        _this.swiper_panel.width = Laya.stage.width;
        _this.swiper_panel.height = Laya.stage.height;
        _this.chapterinfo = chapterinfo;
        if (chapterinfo) {
            _this.chapter_title.text = '第' + chapterinfo.index + '章 ' + chapterinfo.title;
        }
        var apiUtil1 = new ApiUtil();
        apiUtil1.Stat(jmt.Stat.PAGE_CHAPTER_BUY, jmt.Stat.ACT_SHOWAD); //统计
        //请求数据
        var apiUtil = new ApiUtil();
        apiUtil.getPayPackage(Handler.create(_this, _this.initData));
        if (complete) {
            _this.complete = complete;
        }
        _this.swiper_panel.height = 0;
        _this.swiper_panel.width = 0;
        _this.swiper_panel.vScrollBarSkin = '';
        return _this;
    }
    // 得到数据
    ChapterUnlock.prototype.initData = function (res) {
        this.data = res;
        this.createOnlyPackageInfo();
        if (this.data.chapter) {
            // 点击购买按钮，调接口
            this.onlyPackageBuyBtn.on(Laya.Event.CLICK, this, this.createOrder, [this.data.chapter]);
        }
        if (this.data.all) {
            var allPackageInfo = new AllPackageInfo(this.data.all, 70, Handler.create(this, this.payComplete));
            this.swiper_box.addChild(allPackageInfo);
            allPackageInfo.top = this.onlyPackageBgBox.top + this.onlyPackageBgBox.height + 27;
            this.swiper_panel.height = Laya.stage.height;
            this.swiper_panel.width = Laya.stage.width;
            this.swiper_panel.vScrollBarSkin = '';
            this.swiper_box.width = Laya.stage.width;
            this.swiper_box.height = allPackageInfo.top + allPackageInfo.height;
            // this.swiper_panel.vScrollBarSkin = ''
            // console.log(this.swiper_panel.height);
            // console.log(this.swiper_box.height);
        }
        // 由于网络延迟，设置过渡效果
        Load.style(this.swiper_panel, 'alpha', 0, 1);
    };
    /**
     * 点击付款（下单）
     */
    ChapterUnlock.prototype.createOrder = function (goodsinfo) {
        // jmt.Console.log('我要付款全套餐');
        // jmt.common.Toast.msg('开始购买');
        var apiUtil1 = new ApiUtil();
        apiUtil1.Stat(jmt.Stat.PAGE_CHAPTER_BUY, jmt.Stat.ACT_BUY_CHAPTER);
        if (Laya.Browser.onMiniGame) {
            var apiUtil = new ApiUtil();
            apiUtil.checkMiniBalance(Handler.create(this, this.checkMiniBalance, [goodsinfo]));
        }
        else if (WywUtil.onLimixiu()) {
            if (goodsinfo && goodsinfo.otherids && goodsinfo.otherids.qqwyw) {
                WywUtil.checkitem(goodsinfo.otherids.qqwyw, Handler.create(this, this.checkComplete, [goodsinfo]));
            }
            else {
                jmt.common.Toast.error('道具信息错误');
            }
        }
    };
    /**
     * 检查余额回调处理
     * @param goodsinfo
     * @param res
     */
    ChapterUnlock.prototype.checkMiniBalance = function (goodsinfo, res) {
        if (res) {
            var hasitem = false;
            if (res.balance >= goodsinfo.price) {
                hasitem = true;
            }
            var apiUtil = new ApiUtil();
            apiUtil.createOrder(goodsinfo.goodsid, jmt.Order.PAYTYPE_WXMINI, this.chapterinfo.chapterid, this.chapterinfo.branchid, 0, Handler.create(this, this.createOrderComplete, [goodsinfo, hasitem]));
        }
    };
    ChapterUnlock.prototype.checkComplete = function (goodsinfo, hasitem) {
        //不存在则购买
        var apiUtil = new ApiUtil();
        apiUtil.createOrder(goodsinfo.goodsid, jmt.Order.PAYTYPE_QQWYW, this.chapterinfo.chapterid, this.chapterinfo.branchid, 0, Handler.create(this, this.createOrderComplete, [goodsinfo, hasitem]));
    };
    //创建订单成功，发起支付
    ChapterUnlock.prototype.createOrderComplete = function (goodsinfo, hasitem, res) {
        if (res) {
            // let money = res.money;
            var itemid = parseInt(goodsinfo.otherids.qqwyw);
            res.itemid = itemid;
            var orderid = res.orderid;
            var goodsid = goodsinfo.goodsid;
            var price = goodsinfo.price;
            if (hasitem) {
                // jmt.Print.log('consumeGoods');
                if (WywUtil.onLimixiu()) {
                    WywUtil.consumeGoods(orderid, goodsid, itemid, Handler.create(this, this.payComplete));
                }
                else if (Laya.Browser.onMiniGame) {
                    WxUtil.consumeGoods(orderid, goodsid, price, Handler.create(this, this.payComplete));
                }
            }
            else {
                if (WywUtil.onLimixiu()) {
                    WywUtil.buyGoods(orderid, goodsid, itemid, 1, Handler.create(this, this.payComplete));
                }
                else if (Laya.Browser.onMiniGame) {
                    WxUtil.buyGoods(orderid, goodsid, price, Handler.create(this, this.payComplete));
                }
            }
        }
        else {
            jmt.common.Toast.error('创建订单失败');
        }
    };
    //支付成功
    ChapterUnlock.prototype.payComplete = function (res) {
        // jmt.Print.log('支付成功');
        var apiUtil1 = new ApiUtil();
        apiUtil1.Stat(jmt.Stat.PAGE_CHAPTER_BUY, jmt.Stat.ACT_BUY_CHAPTER_SUCCESS);
        jmt.common.Toast.success('支付成功', 3000, Handler.create(this, this.initGame));
        //TODO: 购买成功处理，跳转阅读内容
    };
    ChapterUnlock.prototype.initGame = function () {
        jmt.Data.chapterinfo.isbuy = 1;
        jmt.Resource.clearTextureRes(this.bgImg.skin);
        jmt.Resource.clearTextureRes(this.girlImg.skin);
        GameMain.initGame({ chapterinfo: jmt.Data.chapterinfo });
        // this.removeSelf();
        // this.destroy(true);
    };
    //创建单章节套餐内容
    ChapterUnlock.prototype.createOnlyPackageInfo = function () {
        //创建列表
        // this.onlyPackageList.spaceX = 
        this.onlyPackageList.repeatX = 3;
        // console.log(this.data);
        this.onlyPackageList.spaceX = 10;
        this.onlyPackageList.spaceY = 10;
        this.onlyPackageList.vScrollBarSkin = '';
        this.onlyPackageList.itemRender = packageListItem;
        this.onlyPackageList.renderHandler = Handler.create(this, this.updata, null, false);
        // 添加第一个默认list
        this.onlyPackageList.repeatY = 1;
        var firstOption = { title: '单章节解锁' };
        var listArry = null;
        if (this.data && this.data.chapter && this.data.chapter.sublist) {
            firstOption.title = "\u7B2C" + this.chapterinfo.index + "\u7AE0\u89E3\u9501";
            listArry = this.data.chapter.sublist;
            listArry.unshift(firstOption);
            this.onlyPackageList.repeatY = Math.ceil(listArry.length / 3); //这里要动态，根据列表数量
        }
        this.onlyPackageList.array = listArry; //套餐列表的数据项
        this.onlyPackageListBox.width = this.onlyPackageList.width;
        this.onlyPackageListBox.height = this.onlyPackageList.height;
        this.onlyPackageListBox.left = 44;
        this.onlyPackageListBox.addChild(this.onlyPackageList);
        //创建购买按钮
        this.onlyPackageBuyBtn.skin = 'skin/common/btn_chapter_pay_one_price.png';
        this.onlyPackageBuyBtn.stateNum = 2;
        this.onlyPackageBuyBtn.centerX = 0;
        //创建购买价格
        var buyPrice = new game.PriceHBox(this.onlyPackageBuyBtn, this.data.chapter.price / 100, '#FFD800', 47, 37);
        buyPrice.centerX = -25;
        buyPrice.centerY = -15;
        // 设置各各元素的之间的距离和高度
        this.onlyPackageListBox.top = 27;
        this.onlyPackageBuyBtn.top = this.onlyPackageListBox.top + this.onlyPackageListBox.height + 18;
        //创建盒子装矩形，然后改变透明度
        var onlyPackageBg = new Laya.Box();
        onlyPackageBg.width = 705;
        onlyPackageBg.height = this.onlyPackageBuyBtn.top + this.onlyPackageBuyBtn.height + 27;
        onlyPackageBg.graphics.drawRect(0, 0, 705, onlyPackageBg.height, '#000000');
        onlyPackageBg.alpha = 0.5;
        this.onlyPackageBgBox.width = 705;
        this.onlyPackageBgBox.height = onlyPackageBg.height;
        this.onlyPackageBgBox.centerX = 0;
        this.onlyPackageBgBox.top = 428;
        this.onlyPackageBgBox.addChild(onlyPackageBg);
        this.onlyPackageBgBox.addChild(this.onlyPackageListBox);
        this.onlyPackageBgBox.addChild(this.onlyPackageBuyBtn);
        this.swiper_box.addChild(this.onlyPackageBgBox);
        this.swiper_panel.vScrollBarSkin = '';
    };
    // 更新套餐列表数据
    ChapterUnlock.prototype.updata = function (cell, index) {
        cell.setDate(cell.dataSource);
    };
    return ChapterUnlock;
}(ui.home.ChapterUnlockUI));
//# sourceMappingURL=ChapterUnlock.js.map