var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var LoadingView = /** @class */ (function (_super) {
    __extends(LoadingView, _super);
    function LoadingView(chapterid, complete) {
        var _this = _super.call(this) || this;
        _this.name = 'LoadingView';
        //平台，为了兼容零下记忆
        if (jmt.Config.NOVELID != 10000) {
            _this.visible = false;
        }
        _this.height = Laya.stage.height;
        if (complete) {
            _this.completeHandler = complete;
        }
        // 加载动画背景
        // let loadingBg = new game.PlacardLoad();
        // this.addChild(loadingBg);
        // loadingBg.zOrder = -1;
        _this.LoadRes(chapterid);
        return _this;
        // this.iconBox = new game.IconLoading(this);
    }
    LoadingView.prototype.onProgress = function (args, pro) {
        // console.log("加载了总文件的:"+pro*100+"%");
        // var iconp = Math.floor(pro * 100/2)-1;
        // this.iconBox.goto(iconp);
        var progress = Math.floor(pro * 100) + '';
        // console.log(progress);
        var text = '';
        if (args && args.totalsize) {
            var downsize = args.totalsize * pro;
            downsize = downsize / 1024;
            if (downsize >= 1024) {
                downsize = downsize / 1024;
                text += downsize.toFixed(2) + 'M / ';
            }
            else {
                text += downsize.toFixed(2) + 'K / ';
            }
            var totalsize = args.totalsize / 1024;
            if (totalsize >= 1024) {
                totalsize = totalsize / 1024;
                text += totalsize.toFixed(2) + 'M ';
            }
            else {
                text += totalsize.toFixed(2) + 'K ';
            }
        }
        text += ' ' + progress + '%';
        if (text) {
            this.loadingText.text = text;
            this.loadProgress.value = pro;
        }
    };
    LoadingView.prototype.onComplete = function (args, res) {
        var text = '';
        if (args && args.totalsize) {
            var totalsize = args.totalsize / 1024;
            if (totalsize >= 1024) {
                totalsize = totalsize / 1024;
                text += totalsize.toFixed(2) + 'M / ' + totalsize.toFixed(2);
            }
            else {
                text += totalsize.toFixed(2) + 'K / ' + totalsize.toFixed(2);
            }
        }
        this.loadingText.text = text + '  100%';
        this.loadProgress.value = 1;
        // let apiUtil = new ApiUtil();
        // apiUtil.Stat(jmt.Stat.PAGE_LOADING,jmt.Stat.ACT_LOADRES_COMPLETE);//加载完成统计
        //回调父级页面
        if (this.completeHandler) {
            this.completeHandler.run();
        }
        // 从舞台移除自己
        // this.removeSelf();//与destory冲突，remove后，destory无效
        this.destroy(true);
    };
    LoadingView.prototype.onError = function (err) {
        // console.log("加载失败: " + err);
        // jmt.Print.log(err);
    };
    LoadingView.prototype.LoadRes = function (chapterid) {
        this.apiUtil = new ApiUtil();
        this.apiUtil.loadRes(chapterid, Handler.create(this, this.onLoadComplete));
    };
    LoadingView.prototype.onLoadError = function (res) {
        // jmt.Print.log(res);
    };
    LoadingView.prototype.onLoadComplete = function (res) {
        // let apiUtil = new ApiUtil();
        // apiUtil.Stat(jmt.Stat.PAGE_LOADING,jmt.Stat.ACT_LOAD_RES);//开始加载统计
        // jmt.Print.log('开启加载统计');
        //jmt.Data.chapterinfo = res;
        // this.callback.apply(this.caller,[{code:1,data:{}}]);
        // var reslist = res.reslist?res.reslist:[];
        // // console.log(reslist);
        if (res && res.length > 0) {
            var resArray = [];
            var totalsize = 0;
            // Laya.URL.basePath = jmt.Config.RES_DOMAIN;
            for (var index = 0; index < res.length; index++) {
                // this.loadingText.text='0%';
                // this.loadProgress.value = 0;
                var line = res[index];
                var arr = line.split(',');
                var path = arr[0];
                var name_1 = arr[1];
                var size = parseInt(arr[2]);
                //console.log(obj);
                var type = Laya.Loader.IMAGE;
                if (path.match('audio')) {
                    type = Laya.Loader.SOUND;
                }
                else if (path.match('role') && name_1.match('.sk')) {
                    type = Laya.Loader.BUFFER; //骨骼动画，必须指定类型
                }
                if (type == Laya.Loader.IMAGE || type == Laya.Loader.BUFFER) {
                    var obj = {
                        url: jmt.Config.RES_DOMAIN + path + '/' + name_1,
                        type: type
                    };
                    resArray.push(obj);
                    totalsize += size;
                }
                // Laya.loader.load(obj.url, Handler.create(this, this.onComplete), Handler.create(this, this.onProgress,null,false),type);
                // 侦听加载失败
                // Laya.loader.on(Laya.Event.ERROR, this, this.onError);    
            }
            if (resArray.length > 0) {
                //TODO: 注意加载类型，可能导致无法显示
                Laya.loader.load(resArray, Laya.Handler.create(this, this.onComplete, [{ totalsize: totalsize }]), Laya.Handler.create(this, this.onProgress, [{ totalsize: totalsize }], false), null, 1, true);
                // 侦听加载失败
                Laya.loader.on(Laya.Event.ERROR, this, this.onError);
            }
            else {
                if (this.onComplete) {
                    this.onComplete();
                }
            }
        }
        else {
            if (this.onComplete) {
                this.onComplete();
            }
        }
    };
    return LoadingView;
}(ui.home.LoadingUI));
//# sourceMappingURL=LoadingView.js.map